[Info] Logging to: out/log/convert_cnn_hls4ml_20251013_173454.log
[Info] TF version: 2.20.0
[Info] hls4ml version: 0.8.1
[Info] Using config: {
  "model": "/home/work1/Work/CNN_iCube_FPGA_b/models/10.07.25_15-31_100s_2D_CNN_model_2Layer.h5",
  "sample": "/home/work1/Work/CNN_iCube_FPGA_b/out/X_pkl-filtered_float32_N_4_256_1.npy",
  "labels": null,
  "outdir": "hls_cnn_2d_100s",
  "part": "xcku5p-ffvb676-2-e",
  "backend": "Vitis",
  "io": "io_stream",
  "precision": "ap_fixed<16,2>",
  "reuse": 8,
  "strip_dropout": true,
  "do_build": false,
  "test_batch": 8,
  "eval_maxN": 4096,
  "eval_batch": 256,
  "save_preds": false,
  "preds_out": "preds_eval.npz",
  "task_threshold": 0.5
}
[OK] Model input shape verified: (None, 4, 256, 1)

=== Keras Model Summary ===
Model: "converted_model"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 input_1 (InputLayer)        [(None, 4, 256, 1)]       0         
                                                                 
 conv2d (Conv2D)             (None, 1, 247, 20)        820       
                                                                 
 conv2d_1 (Conv2D)           (None, 1, 238, 10)        2010      
                                                                 
 flatten (Flatten)           (None, 2380)              0         
                                                                 
 dense (Dense)               (None, 1)                 2381      
                                                                 
=================================================================
Total params: 5211 (20.36 KB)
Trainable params: 5211 (20.36 KB)
Non-trainable params: 0 (0.00 Byte)
_________________________________________________________________

=== Layer Details (Conv2D/Dense) ===
[Conv2D] conv2d filters=20 kernel=(4, 10) stride=(1, 1) padding=valid activation=relu data_format=channels_last
[Conv2D] conv2d_1 filters=10 kernel=(1, 10) stride=(1, 1) padding=valid activation=relu data_format=channels_last
[Dense ] dense units=1 activation=sigmoid

=== HLS Config (compact) ===
{
  "Model": {
    "Precision": "ap_fixed<16,2>",
    "ReuseFactor": 8,
    "Strategy": "Latency",
    "BramFactor": 8000,
    "PipelineStyle": "dataflow",
    "ClockPeriod": 4,
    "IOType": "io_stream"
  },
  "LayerName": {
    "conv2d": {
      "Precision": {
        "result": "ap_fixed<20,10>",
        "weight": "ap_fixed<16,2>",
        "bias": "ap_fixed<16,2>",
        "accum": "ap_fixed<14,4>"
      },
      "ReuseFactor": 8,
      "Strategy": "Latency"
    },
    "conv2d_1": {
      "Precision": {
        "result": "ap_fixed<20,10>",
        "weight": "ap_fixed<16,2>",
        "bias": "ap_fixed<16,2>",
        "accum": "ap_fixed<14,4>"
      },
      "ReuseFactor": 8,
      "Strategy": "Latency"
    },
    "dense": {
      "Precision": {
        "result": "ap_fixed<24,10>",
        "weight": "ap_fixed<16,2>",
        "bias": "ap_fixed<16,2>",
        "accum": "ap_fixed<28,12>"
      },
      "ReuseFactor": 8,
      "Strategy": "Latency"
    }
  }
}

[Step] Converting Keras model → HLS project ...
Interpreting Model
Topology:
Layer name: input_1, layer type: InputLayer, input shapes: [[None, 4, 256, 1]], output shape: [None, 4, 256, 1]
Layer name: conv2d, layer type: Conv2D, input shapes: [[None, 4, 256, 1]], output shape: [None, 1, 247, 20]
Layer name: conv2d_1, layer type: Conv2D, input shapes: [[None, 1, 247, 20]], output shape: [None, 1, 238, 10]
Layer name: flatten, layer type: Reshape, input shapes: [[None, 1, 238, 10]], output shape: [None, np.int64(2380)]
Layer name: dense, layer type: Dense, input shapes: [[None, np.int64(2380)]], output shape: [None, 1]
Creating HLS model
[OK] Conversion done. Project at: hls_cnn_2d_100s
[OK] Updated project.tcl backend to: Vitis

[Step] Compiling HLS C-simulation model ...
Writing HLS project
Done
[OK] C-sim compile done.

>>> Real-batch check:
N=8 | MAE=0.000976235 | MaxΔ=0.000976443

>>> Single sample check (@ sample path):
Keras: 0.9999996423721313  | HLS: 0.9990234375

>>> Random-input diagnostic (not representative):
MAE=0.749023 | MaxΔ=0.999023
Keras preds (first 5): [0.0, 8.126372297870149e-32, 0.0, 1.080174059343487e-29, 1.1151772632978478e-36]
HLS   preds (first 5): [0.0, 0.9990234375, 0.9990234375, 0.9990234375, 0.9990234375]

[Level-A] NUMERIC DATASET (per-sample)  N=1341  MAE=0.0297925  RMSE=0.125541  MaxΔ=0.960287
[Level-A] Top-50 |Δ| samples (idx, y_keras, y_hls, Δ):
  #   24: 0.013346  vs  0.973633   Δ=0.960287
  # 1335: 0.035599  vs  0.978516   Δ=0.942917
  # 1337: 0.040949  vs  0.976562   Δ=0.935614
  #  496: 0.043331  vs  0.964844   Δ=0.921513
  #  368: 0.038814  vs  0.942383   Δ=0.903568
  #   15: 0.051112  vs  0.952148   Δ=0.901037
  #   65: 0.050883  vs  0.950195   Δ=0.899312
  # 1297: 0.000036  vs  0.892578   Δ=0.892542
  # 1320: 0.003022  vs  0.889648   Δ=0.886626
  #  147: 0.109876  vs  0.996094   Δ=0.886217
  #   27: 0.081418  vs  0.936523   Δ=0.855106
  # 1309: 0.046358  vs  0.894531   Δ=0.848173
  #  484: 0.168075  vs  0.993164   Δ=0.825089
  #   14: 0.142789  vs  0.944336   Δ=0.801547
  #  619: 0.095130  vs  0.892578   Δ=0.797448
  # 1321: 0.002463  vs  0.785156   Δ=0.782693
  #   29: 0.019171  vs  0.799805   Δ=0.780634
  #   21: 0.196866  vs  0.974609   Δ=0.777744
  #  173: 0.234275  vs  0.978516   Δ=0.744241
  # 1307: 0.015335  vs  0.721680   Δ=0.706345
  # 1007: 0.291231  vs  0.995117   Δ=0.703886
  #  618: 0.337382  vs  0.993164   Δ=0.655782
  #  651: 0.343335  vs  0.999023   Δ=0.655688
  #  530: 0.399053  vs  0.976562   Δ=0.577509
  #  943: 0.424747  vs  0.995117   Δ=0.570370
  #  555: 0.431917  vs  0.999023   Δ=0.567107
  # 1317: 0.433640  vs  0.998047   Δ=0.564407
  # 1114: 0.450051  vs  0.997070   Δ=0.547019
  # 1100: 0.493749  vs  0.998047   Δ=0.504298
  #   36: 0.502098  vs  0.990234   Δ=0.488136
  #   74: 0.524224  vs  0.997070   Δ=0.472847
  # 1076: 0.613093  vs  0.997070   Δ=0.383977
  #  109: 0.569993  vs  0.951172   Δ=0.381178
  #  967: 0.624271  vs  0.999023   Δ=0.374752
  #   31: 0.000113  vs  0.370117   Δ=0.370005
  # 1010: 0.649204  vs  0.998047   Δ=0.348843
  # 1310: 0.682507  vs  0.997070   Δ=0.314563
  # 1322: 0.000077  vs  0.313477   Δ=0.313399
  #  580: 0.688860  vs  0.999023   Δ=0.310163
  #  121: 0.625141  vs  0.930664   Δ=0.305523
  # 1224: 0.695411  vs  0.998047   Δ=0.302636
  # 1080: 0.700116  vs  0.999023   Δ=0.298907
  #  354: 0.700349  vs  0.999023   Δ=0.298674
  # 1101: 0.702253  vs  0.998047   Δ=0.295794
  #  650: 0.718955  vs  0.998047   Δ=0.279092
  #  168: 0.720704  vs  0.988281   Δ=0.267577
  # 1025: 0.746070  vs  0.999023   Δ=0.252953
  # 1112: 0.747747  vs  0.999023   Δ=0.251277
  # 1006: 0.748926  vs  0.999023   Δ=0.250098
  #  366: 0.762560  vs  0.999023   Δ=0.236463
[Level-A] Saved CSV comparison (all 1341 samples, sorted by |Δ|) to: out/error_analysis/level_a_comparison_20251013_173454.csv
[Info] Level-B skipped: CONFIG['labels'] is None.
