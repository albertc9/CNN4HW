[Info] Logging to: out/log/convert_cnn_hls4ml_20251013_180314.log
[Info] TF version: 2.20.0
[Info] hls4ml version: 0.8.1
[Info] Using config: {
  "model": "/home/work1/Work/CNN_iCube_FPGA_b/models/10.07.25_15-31_100s_2D_CNN_model_2Layer.h5",
  "sample": "/home/work1/Work/CNN_iCube_FPGA_b/out/X_pkl-filtered_float32_N_4_256_1.npy",
  "labels": null,
  "outdir": "hls_cnn_2d_100s",
  "part": "xcku5p-ffvb676-2-e",
  "backend": "Vitis",
  "io": "io_stream",
  "precision": "ap_fixed<16,2>",
  "reuse": 8,
  "strip_dropout": true,
  "do_build": false,
  "test_batch": 8,
  "eval_maxN": 4096,
  "eval_batch": 256,
  "save_preds": false,
  "preds_out": "preds_eval.npz",
  "task_threshold": 0.5
}
[OK] Model input shape verified: (None, 4, 256, 1)

=== Keras Model Summary ===
Model: "converted_model"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 input_1 (InputLayer)        [(None, 4, 256, 1)]       0         
                                                                 
 conv2d (Conv2D)             (None, 1, 247, 20)        820       
                                                                 
 conv2d_1 (Conv2D)           (None, 1, 238, 10)        2010      
                                                                 
 flatten (Flatten)           (None, 2380)              0         
                                                                 
 dense (Dense)               (None, 1)                 2381      
                                                                 
=================================================================
Total params: 5211 (20.36 KB)
Trainable params: 5211 (20.36 KB)
Non-trainable params: 0 (0.00 Byte)
_________________________________________________________________

=== Layer Details (Conv2D/Dense) ===
[Conv2D] conv2d filters=20 kernel=(4, 10) stride=(1, 1) padding=valid activation=relu data_format=channels_last
[Conv2D] conv2d_1 filters=10 kernel=(1, 10) stride=(1, 1) padding=valid activation=relu data_format=channels_last
[Dense ] dense units=1 activation=sigmoid

=== HLS Config (compact) ===
{
  "Model": {
    "Precision": "ap_fixed<16,2>",
    "ReuseFactor": 8,
    "Strategy": "Latency",
    "BramFactor": 8000,
    "PipelineStyle": "dataflow",
    "ClockPeriod": 4,
    "IOType": "io_stream"
  },
  "LayerName": {
    "conv2d": {
      "Precision": {
        "result": "ap_fixed<16,2>",
        "weight": "ap_fixed<16,2>",
        "bias": "ap_fixed<16,2>",
        "accum": "ap_fixed<24,4>"
      },
      "ReuseFactor": 8,
      "Strategy": "Latency"
    },
    "conv2d_1": {
      "Precision": {
        "result": "ap_fixed<16,2>",
        "weight": "ap_fixed<16,2>",
        "bias": "ap_fixed<16,2>",
        "accum": "ap_fixed<24,4>"
      },
      "ReuseFactor": 8,
      "Strategy": "Latency"
    },
    "dense": {
      "Precision": {
        "result": "ap_fixed<12,6>",
        "weight": "ap_fixed<16,2>",
        "bias": "ap_fixed<16,2>",
        "accum": "ap_fixed<26,10>"
      },
      "ReuseFactor": 8,
      "Strategy": "Latency"
    }
  }
}

[Step] Converting Keras model → HLS project ...
Interpreting Model
Topology:
Layer name: input_1, layer type: InputLayer, input shapes: [[None, 4, 256, 1]], output shape: [None, 4, 256, 1]
Layer name: conv2d, layer type: Conv2D, input shapes: [[None, 4, 256, 1]], output shape: [None, 1, 247, 20]
Layer name: conv2d_1, layer type: Conv2D, input shapes: [[None, 1, 247, 20]], output shape: [None, 1, 238, 10]
Layer name: flatten, layer type: Reshape, input shapes: [[None, 1, 238, 10]], output shape: [None, np.int64(2380)]
Layer name: dense, layer type: Dense, input shapes: [[None, np.int64(2380)]], output shape: [None, 1]
Creating HLS model
[OK] Conversion done. Project at: hls_cnn_2d_100s
[OK] Updated project.tcl backend to: Vitis

[Step] Compiling HLS C-simulation model ...
Writing HLS project
Done
[OK] C-sim compile done.

>>> Real-batch check:
N=8 | MAE=0.000976235 | MaxΔ=0.000976443

>>> Single sample check (@ sample path):
Keras: 0.9999996423721313  | HLS: 0.9990234375

>>> Random-input diagnostic (not representative):
MAE=0.374634 | MaxΔ=0.999023
Keras preds (first 5): [0.0, 0.0, 5.373377726302214e-24, 0.0, 2.0561196038803855e-24]
HLS   preds (first 5): [0.9990234375, 0.0, 0.0, 0.0, 0.9990234375]

[Level-A] NUMERIC DATASET (per-sample)  N=1341  MAE=0.000791708  RMSE=0.00113711  MaxΔ=0.0240951
[Level-A] Top-50 |Δ| samples (idx, y_keras, y_hls, Δ):
  #  109: 0.569993  vs  0.545898   Δ=0.024095
  # 1297: 0.000036  vs  0.010742   Δ=0.010706
  #  121: 0.625141  vs  0.618164   Δ=0.006977
  #  651: 0.343335  vs  0.348633   Δ=0.005297
  # 1317: 0.433640  vs  0.437500   Δ=0.003860
  #  530: 0.399053  vs  0.395508   Δ=0.003546
  # 1114: 0.450051  vs  0.453125   Δ=0.003074
  #  366: 0.762560  vs  0.765625   Δ=0.003065
  # 1006: 0.748926  vs  0.751953   Δ=0.003027
  # 1298: 0.995159  vs  0.992188   Δ=0.002971
  #  168: 0.720704  vs  0.717773   Δ=0.002931
  #  943: 0.424747  vs  0.421875   Δ=0.002872
  #  566: 0.817187  vs  0.814453   Δ=0.002734
  #  650: 0.718955  vs  0.721680   Δ=0.002725
  # 1007: 0.291231  vs  0.293945   Δ=0.002714
  # 1100: 0.493749  vs  0.496094   Δ=0.002345
  #  517: 0.859624  vs  0.857422   Δ=0.002202
  #   36: 0.502098  vs  0.500000   Δ=0.002098
  # 1080: 0.700116  vs  0.702148   Δ=0.002032
  #   45: 0.866196  vs  0.864258   Δ=0.001938
  #  354: 0.700349  vs  0.702148   Δ=0.001799
  #   74: 0.524224  vs  0.522461   Δ=0.001763
  # 1118: 0.895743  vs  0.897461   Δ=0.001718
  #  967: 0.624271  vs  0.625977   Δ=0.001705
  # 1165: 0.772717  vs  0.774414   Δ=0.001697
  #  555: 0.431917  vs  0.433594   Δ=0.001677
  #  201: 0.938181  vs  0.936523   Δ=0.001658
  #  601: 0.859726  vs  0.861328   Δ=0.001602
  # 1086: 0.915650  vs  0.914062   Δ=0.001587
  #  556: 0.899788  vs  0.901367   Δ=0.001579
  #  619: 0.095130  vs  0.093750   Δ=0.001380
  # 1112: 0.747747  vs  0.749023   Δ=0.001277
  # 1135: 0.921622  vs  0.922852   Δ=0.001230
  # 1001: 0.840090  vs  0.838867   Δ=0.001223
  #  198: 0.954346  vs  0.953125   Δ=0.001221
  #   44: 0.806407  vs  0.807617   Δ=0.001210
  #  350: 0.811305  vs  0.812500   Δ=0.001195
  #   14: 0.142789  vs  0.141602   Δ=0.001188
  # 1010: 0.649204  vs  0.650391   Δ=0.001187
  # 1060: 0.763881  vs  0.762695   Δ=0.001186
  #  968: 0.912892  vs  0.914062   Δ=0.001170
  # 1076: 0.613093  vs  0.614258   Δ=0.001165
  #  528: 0.837727  vs  0.838867   Δ=0.001141
  # 1078: 0.934622  vs  0.933594   Δ=0.001029
  # 1301: 0.914100  vs  0.913086   Δ=0.001014
  #  534: 0.998075  vs  0.997070   Δ=0.001005
  #   86: 0.958987  vs  0.958008   Δ=0.000979
  # 1274: 1.000000  vs  0.999023   Δ=0.000977
  # 1295: 1.000000  vs  0.999023   Δ=0.000977
  #  136: 1.000000  vs  0.999023   Δ=0.000977
[Level-A] Saved CSV comparison (all 1341 samples, sorted by |Δ|) to: out/error_analysis/level_a_comparison_20251013_180314.csv
[Info] Level-B skipped: CONFIG['labels'] is None.
