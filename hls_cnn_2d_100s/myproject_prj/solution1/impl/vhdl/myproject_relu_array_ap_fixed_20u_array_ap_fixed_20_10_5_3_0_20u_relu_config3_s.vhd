-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_relu_array_ap_fixed_20u_array_ap_fixed_20_10_5_3_0_20u_relu_config3_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer2_out_dout : IN STD_LOGIC_VECTOR (399 downto 0);
    layer2_out_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    layer2_out_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    layer2_out_empty_n : IN STD_LOGIC;
    layer2_out_read : OUT STD_LOGIC;
    layer3_out_din : OUT STD_LOGIC_VECTOR (399 downto 0);
    layer3_out_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    layer3_out_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    layer3_out_full_n : IN STD_LOGIC;
    layer3_out_write : OUT STD_LOGIC );
end;


architecture behav of myproject_relu_array_ap_fixed_20u_array_ap_fixed_20_10_5_3_0_20u_relu_config3_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_F7 : STD_LOGIC_VECTOR (7 downto 0) := "11110111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_8B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001011";
    constant ap_const_lv32_8C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001100";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_B3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110011";
    constant ap_const_lv32_B4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110100";
    constant ap_const_lv32_C7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000111";
    constant ap_const_lv32_C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001000";
    constant ap_const_lv32_DB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011011";
    constant ap_const_lv32_DC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011100";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_103 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000011";
    constant ap_const_lv32_104 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000100";
    constant ap_const_lv32_117 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010111";
    constant ap_const_lv32_118 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011000";
    constant ap_const_lv32_12B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101011";
    constant ap_const_lv32_12C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101100";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_153 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010011";
    constant ap_const_lv32_154 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010100";
    constant ap_const_lv32_167 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100111";
    constant ap_const_lv32_168 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101000";
    constant ap_const_lv32_17B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111011";
    constant ap_const_lv32_17C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111100";
    constant ap_const_lv32_18F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110001111";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_93 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010011";
    constant ap_const_lv32_9C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011100";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111011";
    constant ap_const_lv32_C4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000100";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011000";
    constant ap_const_lv32_E3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100011";
    constant ap_const_lv32_EC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101100";
    constant ap_const_lv32_F7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_10B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001011";
    constant ap_const_lv32_114 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010100";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_128 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101000";
    constant ap_const_lv32_133 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110011";
    constant ap_const_lv32_13C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111100";
    constant ap_const_lv32_147 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000111";
    constant ap_const_lv32_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010000";
    constant ap_const_lv32_15B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011011";
    constant ap_const_lv32_164 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100100";
    constant ap_const_lv32_16F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101111";
    constant ap_const_lv32_178 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111000";
    constant ap_const_lv32_183 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000011";
    constant ap_const_lv32_18C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110001100";
    constant ap_const_lv32_184 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000100";
    constant ap_const_lv32_18B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110001011";
    constant ap_const_lv32_170 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110000";
    constant ap_const_lv32_177 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110111";
    constant ap_const_lv32_15C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011100";
    constant ap_const_lv32_163 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100011";
    constant ap_const_lv32_148 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001000";
    constant ap_const_lv32_14F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001111";
    constant ap_const_lv32_134 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110100";
    constant ap_const_lv32_13B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111011";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_127 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100111";
    constant ap_const_lv32_10C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001100";
    constant ap_const_lv32_113 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010011";
    constant ap_const_lv32_F8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_E4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100100";
    constant ap_const_lv32_EB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101011";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_D7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010111";
    constant ap_const_lv32_BC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111100";
    constant ap_const_lv32_C3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000011";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_94 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010100";
    constant ap_const_lv32_9B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011011";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln41_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal layer2_out_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal layer3_out_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln51_fu_544_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_reg_1798 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_1_fu_552_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln51_1_reg_1803 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln51_2_fu_586_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_2_reg_1808 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_3_fu_594_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_3_reg_1813 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_4_fu_628_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_4_reg_1818 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_5_fu_636_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_5_reg_1823 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_6_fu_670_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_6_reg_1828 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_7_fu_678_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_7_reg_1833 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_8_fu_712_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_8_reg_1838 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_9_fu_720_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_9_reg_1843 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_10_fu_754_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_10_reg_1848 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_11_fu_762_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_11_reg_1853 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_12_fu_796_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_12_reg_1858 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_13_fu_804_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_13_reg_1863 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_14_fu_838_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_14_reg_1868 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_15_fu_846_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_15_reg_1873 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_16_fu_880_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_16_reg_1878 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_17_fu_888_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_17_reg_1883 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_18_fu_922_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_18_reg_1888 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_19_fu_930_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_19_reg_1893 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_20_fu_964_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_20_reg_1898 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_21_fu_972_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_21_reg_1903 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_22_fu_1006_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_22_reg_1908 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_23_fu_1014_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_23_reg_1913 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_24_fu_1048_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_24_reg_1918 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_25_fu_1056_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_25_reg_1923 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_26_fu_1090_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_26_reg_1928 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_27_fu_1098_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_27_reg_1933 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_28_fu_1132_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_28_reg_1938 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_29_fu_1140_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_29_reg_1943 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_30_fu_1174_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_30_reg_1948 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_31_fu_1182_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_31_reg_1953 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_32_fu_1216_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_32_reg_1958 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_33_fu_1224_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_33_reg_1963 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_34_fu_1258_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_34_reg_1968 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_35_fu_1266_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_35_reg_1973 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_36_fu_1300_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_36_reg_1978 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_37_fu_1308_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_37_reg_1983 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_38_fu_1342_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_38_reg_1988 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_39_fu_1350_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_39_reg_1993 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_40_fu_1368_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_40_reg_1998 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_41_fu_1386_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_41_reg_2003 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_42_fu_1404_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_42_reg_2008 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_43_fu_1422_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_43_reg_2013 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_44_fu_1440_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_44_reg_2018 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_45_fu_1458_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_45_reg_2023 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_46_fu_1476_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_46_reg_2028 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_47_fu_1494_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_47_reg_2033 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_48_fu_1512_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_48_reg_2038 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_49_fu_1530_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_49_reg_2043 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_50_fu_1548_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_50_reg_2048 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_51_fu_1566_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_51_reg_2053 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_52_fu_1584_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_52_reg_2058 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_53_fu_1602_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_53_reg_2063 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_54_fu_1620_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_54_reg_2068 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_55_fu_1638_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_55_reg_2073 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_56_fu_1656_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_56_reg_2078 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_57_fu_1674_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_57_reg_2083 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_58_fu_1692_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_58_reg_2088 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_59_fu_1710_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_59_reg_2093 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_288 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal i_2_fu_319_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln44_fu_330_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_fu_530_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_2_fu_534_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln44_1_fu_334_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_1_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_3_fu_566_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_1_fu_576_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln44_2_fu_344_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_2_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_6_fu_608_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_4_fu_618_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln44_3_fu_354_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_3_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_9_fu_650_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_7_fu_660_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln44_4_fu_364_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_4_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_s_fu_692_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_10_fu_702_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln44_5_fu_374_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_5_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_5_fu_734_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_13_fu_744_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln44_6_fu_384_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_6_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_8_fu_776_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_16_fu_786_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln44_7_fu_394_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_7_fu_812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_11_fu_818_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_19_fu_828_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln44_8_fu_404_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_8_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_12_fu_860_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_22_fu_870_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln44_9_fu_414_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_9_fu_896_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_14_fu_902_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_25_fu_912_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln44_s_fu_424_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_10_fu_938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_15_fu_944_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_28_fu_954_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln44_10_fu_434_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_11_fu_980_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_17_fu_986_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_29_fu_996_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln44_11_fu_444_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_12_fu_1022_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_18_fu_1028_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_30_fu_1038_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln44_12_fu_454_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_13_fu_1064_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_20_fu_1070_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_31_fu_1080_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln44_13_fu_464_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_14_fu_1106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_21_fu_1112_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_32_fu_1122_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln44_14_fu_474_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_15_fu_1148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_23_fu_1154_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_33_fu_1164_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln44_15_fu_484_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_16_fu_1190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_24_fu_1196_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_34_fu_1206_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln44_16_fu_494_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_17_fu_1232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_26_fu_1238_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_35_fu_1248_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln44_17_fu_504_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_18_fu_1274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_27_fu_1280_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_36_fu_1290_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln44_18_fu_514_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_19_fu_1316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_37_fu_1322_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_38_fu_1332_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_1358_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_1376_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_1394_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_1412_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_1430_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_1448_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_1466_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_1484_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_1502_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_1520_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_1538_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_1556_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_1574_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_1592_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_1610_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_1628_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_1646_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_1664_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_1682_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_1700_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln57_fu_1718_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_219 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component myproject_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_219)) then
                if ((icmp_ln41_fu_313_p2 = ap_const_lv1_0)) then 
                    i_fu_288 <= i_2_fu_319_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_288 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                select_ln51_10_reg_1848 <= select_ln51_10_fu_754_p3;
                select_ln51_11_reg_1853 <= select_ln51_11_fu_762_p3;
                select_ln51_12_reg_1858 <= select_ln51_12_fu_796_p3;
                select_ln51_13_reg_1863 <= select_ln51_13_fu_804_p3;
                select_ln51_14_reg_1868 <= select_ln51_14_fu_838_p3;
                select_ln51_15_reg_1873 <= select_ln51_15_fu_846_p3;
                select_ln51_16_reg_1878 <= select_ln51_16_fu_880_p3;
                select_ln51_17_reg_1883 <= select_ln51_17_fu_888_p3;
                select_ln51_18_reg_1888 <= select_ln51_18_fu_922_p3;
                select_ln51_19_reg_1893 <= select_ln51_19_fu_930_p3;
                select_ln51_1_reg_1803 <= select_ln51_1_fu_552_p3;
                select_ln51_20_reg_1898 <= select_ln51_20_fu_964_p3;
                select_ln51_21_reg_1903 <= select_ln51_21_fu_972_p3;
                select_ln51_22_reg_1908 <= select_ln51_22_fu_1006_p3;
                select_ln51_23_reg_1913 <= select_ln51_23_fu_1014_p3;
                select_ln51_24_reg_1918 <= select_ln51_24_fu_1048_p3;
                select_ln51_25_reg_1923 <= select_ln51_25_fu_1056_p3;
                select_ln51_26_reg_1928 <= select_ln51_26_fu_1090_p3;
                select_ln51_27_reg_1933 <= select_ln51_27_fu_1098_p3;
                select_ln51_28_reg_1938 <= select_ln51_28_fu_1132_p3;
                select_ln51_29_reg_1943 <= select_ln51_29_fu_1140_p3;
                select_ln51_2_reg_1808 <= select_ln51_2_fu_586_p3;
                select_ln51_30_reg_1948 <= select_ln51_30_fu_1174_p3;
                select_ln51_31_reg_1953 <= select_ln51_31_fu_1182_p3;
                select_ln51_32_reg_1958 <= select_ln51_32_fu_1216_p3;
                select_ln51_33_reg_1963 <= select_ln51_33_fu_1224_p3;
                select_ln51_34_reg_1968 <= select_ln51_34_fu_1258_p3;
                select_ln51_35_reg_1973 <= select_ln51_35_fu_1266_p3;
                select_ln51_36_reg_1978 <= select_ln51_36_fu_1300_p3;
                select_ln51_37_reg_1983 <= select_ln51_37_fu_1308_p3;
                select_ln51_38_reg_1988 <= select_ln51_38_fu_1342_p3;
                select_ln51_39_reg_1993 <= select_ln51_39_fu_1350_p3;
                select_ln51_3_reg_1813 <= select_ln51_3_fu_594_p3;
                select_ln51_40_reg_1998 <= select_ln51_40_fu_1368_p3;
                select_ln51_41_reg_2003 <= select_ln51_41_fu_1386_p3;
                select_ln51_42_reg_2008 <= select_ln51_42_fu_1404_p3;
                select_ln51_43_reg_2013 <= select_ln51_43_fu_1422_p3;
                select_ln51_44_reg_2018 <= select_ln51_44_fu_1440_p3;
                select_ln51_45_reg_2023 <= select_ln51_45_fu_1458_p3;
                select_ln51_46_reg_2028 <= select_ln51_46_fu_1476_p3;
                select_ln51_47_reg_2033 <= select_ln51_47_fu_1494_p3;
                select_ln51_48_reg_2038 <= select_ln51_48_fu_1512_p3;
                select_ln51_49_reg_2043 <= select_ln51_49_fu_1530_p3;
                select_ln51_4_reg_1818 <= select_ln51_4_fu_628_p3;
                select_ln51_50_reg_2048 <= select_ln51_50_fu_1548_p3;
                select_ln51_51_reg_2053 <= select_ln51_51_fu_1566_p3;
                select_ln51_52_reg_2058 <= select_ln51_52_fu_1584_p3;
                select_ln51_53_reg_2063 <= select_ln51_53_fu_1602_p3;
                select_ln51_54_reg_2068 <= select_ln51_54_fu_1620_p3;
                select_ln51_55_reg_2073 <= select_ln51_55_fu_1638_p3;
                select_ln51_56_reg_2078 <= select_ln51_56_fu_1656_p3;
                select_ln51_57_reg_2083 <= select_ln51_57_fu_1674_p3;
                select_ln51_58_reg_2088 <= select_ln51_58_fu_1692_p3;
                select_ln51_59_reg_2093 <= select_ln51_59_fu_1710_p3;
                select_ln51_5_reg_1823 <= select_ln51_5_fu_636_p3;
                select_ln51_6_reg_1828 <= select_ln51_6_fu_670_p3;
                select_ln51_7_reg_1833 <= select_ln51_7_fu_678_p3;
                select_ln51_8_reg_1838 <= select_ln51_8_fu_712_p3;
                select_ln51_9_reg_1843 <= select_ln51_9_fu_720_p3;
                select_ln51_reg_1798 <= select_ln51_fu_544_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(layer2_out_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (layer2_out_empty_n = ap_const_logic_0);
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(layer3_out_full_n)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (layer3_out_full_n = ap_const_logic_0);
    end process;


    ap_condition_219_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_219 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln41_fu_313_p2, ap_start_int)
    begin
        if (((icmp_ln41_fu_313_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_288, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_288;
        end if; 
    end process;

    i_2_fu_319_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv8_1));
    icmp_ln41_fu_313_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv8_F7) else "0";
    icmp_ln51_10_fu_938_p2 <= "1" when (signed(trunc_ln44_s_fu_424_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_11_fu_980_p2 <= "1" when (signed(trunc_ln44_10_fu_434_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_12_fu_1022_p2 <= "1" when (signed(trunc_ln44_11_fu_444_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_13_fu_1064_p2 <= "1" when (signed(trunc_ln44_12_fu_454_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_14_fu_1106_p2 <= "1" when (signed(trunc_ln44_13_fu_464_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_15_fu_1148_p2 <= "1" when (signed(trunc_ln44_14_fu_474_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_16_fu_1190_p2 <= "1" when (signed(trunc_ln44_15_fu_484_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_17_fu_1232_p2 <= "1" when (signed(trunc_ln44_16_fu_494_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_18_fu_1274_p2 <= "1" when (signed(trunc_ln44_17_fu_504_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_19_fu_1316_p2 <= "1" when (signed(trunc_ln44_18_fu_514_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_1_fu_560_p2 <= "1" when (signed(trunc_ln44_1_fu_334_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_2_fu_602_p2 <= "1" when (signed(trunc_ln44_2_fu_344_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_3_fu_644_p2 <= "1" when (signed(trunc_ln44_3_fu_354_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_4_fu_686_p2 <= "1" when (signed(trunc_ln44_4_fu_364_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_5_fu_728_p2 <= "1" when (signed(trunc_ln44_5_fu_374_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_6_fu_770_p2 <= "1" when (signed(trunc_ln44_6_fu_384_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_7_fu_812_p2 <= "1" when (signed(trunc_ln44_7_fu_394_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_8_fu_854_p2 <= "1" when (signed(trunc_ln44_8_fu_404_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_9_fu_896_p2 <= "1" when (signed(trunc_ln44_9_fu_414_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_fu_524_p2 <= "1" when (signed(trunc_ln44_fu_330_p1) > signed(ap_const_lv20_0)) else "0";

    layer2_out_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, layer2_out_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_out_blk_n <= layer2_out_empty_n;
        else 
            layer2_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer2_out_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_out_read <= ap_const_logic_1;
        else 
            layer2_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer3_out_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, layer3_out_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer3_out_blk_n <= layer3_out_full_n;
        else 
            layer3_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer3_out_din <= (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((select_ln51_39_reg_1993 & select_ln51_40_reg_1998) & select_ln51_38_reg_1988) & select_ln51_37_reg_1983) & select_ln51_41_reg_2003) & select_ln51_36_reg_1978) & select_ln51_35_reg_1973) & select_ln51_42_reg_2008) & select_ln51_34_reg_1968) & select_ln51_33_reg_1963) & select_ln51_43_reg_2013) & select_ln51_32_reg_1958) & select_ln51_31_reg_1953) & select_ln51_44_reg_2018) & select_ln51_30_reg_1948) & select_ln51_29_reg_1943) & select_ln51_45_reg_2023) & select_ln51_28_reg_1938) & select_ln51_27_reg_1933) & select_ln51_46_reg_2028) & select_ln51_26_reg_1928) & select_ln51_25_reg_1923) & select_ln51_47_reg_2033) & select_ln51_24_reg_1918) & select_ln51_23_reg_1913) & select_ln51_48_reg_2038) & select_ln51_22_reg_1908) & select_ln51_21_reg_1903) & select_ln51_49_reg_2043) & select_ln51_20_reg_1898) & select_ln51_19_reg_1893) & select_ln51_50_reg_2048) & select_ln51_18_reg_1888) & select_ln51_17_reg_1883) & select_ln51_51_reg_2053) & select_ln51_16_reg_1878) 
    & select_ln51_15_reg_1873) & select_ln51_52_reg_2058) & select_ln51_14_reg_1868) & select_ln51_13_reg_1863) & select_ln51_53_reg_2063) & select_ln51_12_reg_1858) & select_ln51_11_reg_1853) & select_ln51_54_reg_2068) & select_ln51_10_reg_1848) & select_ln51_9_reg_1843) & select_ln51_55_reg_2073) & select_ln51_8_reg_1838) & select_ln51_7_reg_1833) & select_ln51_56_reg_2078) & select_ln51_6_reg_1828) & select_ln51_5_reg_1823) & select_ln51_57_reg_2083) & select_ln51_4_reg_1818) & select_ln51_3_reg_1813) & select_ln51_58_reg_2088) & select_ln51_2_reg_1808) & zext_ln57_fu_1718_p1) & select_ln51_59_reg_2093) & select_ln51_reg_1798);

    layer3_out_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer3_out_write <= ap_const_logic_1;
        else 
            layer3_out_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln51_10_fu_754_p3 <= 
        trunc_ln52_5_fu_734_p4 when (icmp_ln51_5_fu_728_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_11_fu_762_p3 <= 
        trunc_ln52_13_fu_744_p4 when (icmp_ln51_5_fu_728_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln51_12_fu_796_p3 <= 
        trunc_ln52_8_fu_776_p4 when (icmp_ln51_6_fu_770_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_13_fu_804_p3 <= 
        trunc_ln52_16_fu_786_p4 when (icmp_ln51_6_fu_770_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln51_14_fu_838_p3 <= 
        trunc_ln52_11_fu_818_p4 when (icmp_ln51_7_fu_812_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_15_fu_846_p3 <= 
        trunc_ln52_19_fu_828_p4 when (icmp_ln51_7_fu_812_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln51_16_fu_880_p3 <= 
        trunc_ln52_12_fu_860_p4 when (icmp_ln51_8_fu_854_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_17_fu_888_p3 <= 
        trunc_ln52_22_fu_870_p4 when (icmp_ln51_8_fu_854_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln51_18_fu_922_p3 <= 
        trunc_ln52_14_fu_902_p4 when (icmp_ln51_9_fu_896_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_19_fu_930_p3 <= 
        trunc_ln52_25_fu_912_p4 when (icmp_ln51_9_fu_896_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln51_1_fu_552_p3 <= 
        trunc_ln52_2_fu_534_p4 when (icmp_ln51_fu_524_p2(0) = '1') else 
        ap_const_lv3_0;
    select_ln51_20_fu_964_p3 <= 
        trunc_ln52_15_fu_944_p4 when (icmp_ln51_10_fu_938_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_21_fu_972_p3 <= 
        trunc_ln52_28_fu_954_p4 when (icmp_ln51_10_fu_938_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln51_22_fu_1006_p3 <= 
        trunc_ln52_17_fu_986_p4 when (icmp_ln51_11_fu_980_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_23_fu_1014_p3 <= 
        trunc_ln52_29_fu_996_p4 when (icmp_ln51_11_fu_980_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln51_24_fu_1048_p3 <= 
        trunc_ln52_18_fu_1028_p4 when (icmp_ln51_12_fu_1022_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_25_fu_1056_p3 <= 
        trunc_ln52_30_fu_1038_p4 when (icmp_ln51_12_fu_1022_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln51_26_fu_1090_p3 <= 
        trunc_ln52_20_fu_1070_p4 when (icmp_ln51_13_fu_1064_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_27_fu_1098_p3 <= 
        trunc_ln52_31_fu_1080_p4 when (icmp_ln51_13_fu_1064_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln51_28_fu_1132_p3 <= 
        trunc_ln52_21_fu_1112_p4 when (icmp_ln51_14_fu_1106_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_29_fu_1140_p3 <= 
        trunc_ln52_32_fu_1122_p4 when (icmp_ln51_14_fu_1106_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln51_2_fu_586_p3 <= 
        trunc_ln52_3_fu_566_p4 when (icmp_ln51_1_fu_560_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_30_fu_1174_p3 <= 
        trunc_ln52_23_fu_1154_p4 when (icmp_ln51_15_fu_1148_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_31_fu_1182_p3 <= 
        trunc_ln52_33_fu_1164_p4 when (icmp_ln51_15_fu_1148_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln51_32_fu_1216_p3 <= 
        trunc_ln52_24_fu_1196_p4 when (icmp_ln51_16_fu_1190_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_33_fu_1224_p3 <= 
        trunc_ln52_34_fu_1206_p4 when (icmp_ln51_16_fu_1190_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln51_34_fu_1258_p3 <= 
        trunc_ln52_26_fu_1238_p4 when (icmp_ln51_17_fu_1232_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_35_fu_1266_p3 <= 
        trunc_ln52_35_fu_1248_p4 when (icmp_ln51_17_fu_1232_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln51_36_fu_1300_p3 <= 
        trunc_ln52_27_fu_1280_p4 when (icmp_ln51_18_fu_1274_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_37_fu_1308_p3 <= 
        trunc_ln52_36_fu_1290_p4 when (icmp_ln51_18_fu_1274_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln51_38_fu_1342_p3 <= 
        trunc_ln52_37_fu_1322_p4 when (icmp_ln51_19_fu_1316_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_39_fu_1350_p3 <= 
        trunc_ln52_38_fu_1332_p4 when (icmp_ln51_19_fu_1316_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln51_3_fu_594_p3 <= 
        trunc_ln52_1_fu_576_p4 when (icmp_ln51_1_fu_560_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln51_40_fu_1368_p3 <= 
        tmp_fu_1358_p4 when (icmp_ln51_19_fu_1316_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_41_fu_1386_p3 <= 
        tmp_1_fu_1376_p4 when (icmp_ln51_18_fu_1274_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_42_fu_1404_p3 <= 
        tmp_2_fu_1394_p4 when (icmp_ln51_17_fu_1232_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_43_fu_1422_p3 <= 
        tmp_3_fu_1412_p4 when (icmp_ln51_16_fu_1190_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_44_fu_1440_p3 <= 
        tmp_4_fu_1430_p4 when (icmp_ln51_15_fu_1148_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_45_fu_1458_p3 <= 
        tmp_5_fu_1448_p4 when (icmp_ln51_14_fu_1106_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_46_fu_1476_p3 <= 
        tmp_6_fu_1466_p4 when (icmp_ln51_13_fu_1064_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_47_fu_1494_p3 <= 
        tmp_7_fu_1484_p4 when (icmp_ln51_12_fu_1022_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_48_fu_1512_p3 <= 
        tmp_8_fu_1502_p4 when (icmp_ln51_11_fu_980_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_49_fu_1530_p3 <= 
        tmp_9_fu_1520_p4 when (icmp_ln51_10_fu_938_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_4_fu_628_p3 <= 
        trunc_ln52_6_fu_608_p4 when (icmp_ln51_2_fu_602_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_50_fu_1548_p3 <= 
        tmp_s_fu_1538_p4 when (icmp_ln51_9_fu_896_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_51_fu_1566_p3 <= 
        tmp_10_fu_1556_p4 when (icmp_ln51_8_fu_854_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_52_fu_1584_p3 <= 
        tmp_11_fu_1574_p4 when (icmp_ln51_7_fu_812_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_53_fu_1602_p3 <= 
        tmp_12_fu_1592_p4 when (icmp_ln51_6_fu_770_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_54_fu_1620_p3 <= 
        tmp_13_fu_1610_p4 when (icmp_ln51_5_fu_728_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_55_fu_1638_p3 <= 
        tmp_14_fu_1628_p4 when (icmp_ln51_4_fu_686_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_56_fu_1656_p3 <= 
        tmp_15_fu_1646_p4 when (icmp_ln51_3_fu_644_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_57_fu_1674_p3 <= 
        tmp_16_fu_1664_p4 when (icmp_ln51_2_fu_602_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_58_fu_1692_p3 <= 
        tmp_17_fu_1682_p4 when (icmp_ln51_1_fu_560_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_59_fu_1710_p3 <= 
        tmp_18_fu_1700_p4 when (icmp_ln51_fu_524_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_5_fu_636_p3 <= 
        trunc_ln52_4_fu_618_p4 when (icmp_ln51_2_fu_602_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln51_6_fu_670_p3 <= 
        trunc_ln52_9_fu_650_p4 when (icmp_ln51_3_fu_644_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_7_fu_678_p3 <= 
        trunc_ln52_7_fu_660_p4 when (icmp_ln51_3_fu_644_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln51_8_fu_712_p3 <= 
        trunc_ln52_s_fu_692_p4 when (icmp_ln51_4_fu_686_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_9_fu_720_p3 <= 
        trunc_ln52_10_fu_702_p4 when (icmp_ln51_4_fu_686_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln51_fu_544_p3 <= 
        trunc_ln52_fu_530_p1 when (icmp_ln51_fu_524_p2(0) = '1') else 
        ap_const_lv8_0;
    tmp_10_fu_1556_p4 <= layer2_out_dout(175 downto 168);
    tmp_11_fu_1574_p4 <= layer2_out_dout(155 downto 148);
    tmp_12_fu_1592_p4 <= layer2_out_dout(135 downto 128);
    tmp_13_fu_1610_p4 <= layer2_out_dout(115 downto 108);
    tmp_14_fu_1628_p4 <= layer2_out_dout(95 downto 88);
    tmp_15_fu_1646_p4 <= layer2_out_dout(75 downto 68);
    tmp_16_fu_1664_p4 <= layer2_out_dout(55 downto 48);
    tmp_17_fu_1682_p4 <= layer2_out_dout(35 downto 28);
    tmp_18_fu_1700_p4 <= layer2_out_dout(15 downto 8);
    tmp_1_fu_1376_p4 <= layer2_out_dout(375 downto 368);
    tmp_2_fu_1394_p4 <= layer2_out_dout(355 downto 348);
    tmp_3_fu_1412_p4 <= layer2_out_dout(335 downto 328);
    tmp_4_fu_1430_p4 <= layer2_out_dout(315 downto 308);
    tmp_5_fu_1448_p4 <= layer2_out_dout(295 downto 288);
    tmp_6_fu_1466_p4 <= layer2_out_dout(275 downto 268);
    tmp_7_fu_1484_p4 <= layer2_out_dout(255 downto 248);
    tmp_8_fu_1502_p4 <= layer2_out_dout(235 downto 228);
    tmp_9_fu_1520_p4 <= layer2_out_dout(215 downto 208);
    tmp_fu_1358_p4 <= layer2_out_dout(395 downto 388);
    tmp_s_fu_1538_p4 <= layer2_out_dout(195 downto 188);
    trunc_ln44_10_fu_434_p4 <= layer2_out_dout(239 downto 220);
    trunc_ln44_11_fu_444_p4 <= layer2_out_dout(259 downto 240);
    trunc_ln44_12_fu_454_p4 <= layer2_out_dout(279 downto 260);
    trunc_ln44_13_fu_464_p4 <= layer2_out_dout(299 downto 280);
    trunc_ln44_14_fu_474_p4 <= layer2_out_dout(319 downto 300);
    trunc_ln44_15_fu_484_p4 <= layer2_out_dout(339 downto 320);
    trunc_ln44_16_fu_494_p4 <= layer2_out_dout(359 downto 340);
    trunc_ln44_17_fu_504_p4 <= layer2_out_dout(379 downto 360);
    trunc_ln44_18_fu_514_p4 <= layer2_out_dout(399 downto 380);
    trunc_ln44_1_fu_334_p4 <= layer2_out_dout(39 downto 20);
    trunc_ln44_2_fu_344_p4 <= layer2_out_dout(59 downto 40);
    trunc_ln44_3_fu_354_p4 <= layer2_out_dout(79 downto 60);
    trunc_ln44_4_fu_364_p4 <= layer2_out_dout(99 downto 80);
    trunc_ln44_5_fu_374_p4 <= layer2_out_dout(119 downto 100);
    trunc_ln44_6_fu_384_p4 <= layer2_out_dout(139 downto 120);
    trunc_ln44_7_fu_394_p4 <= layer2_out_dout(159 downto 140);
    trunc_ln44_8_fu_404_p4 <= layer2_out_dout(179 downto 160);
    trunc_ln44_9_fu_414_p4 <= layer2_out_dout(199 downto 180);
    trunc_ln44_fu_330_p1 <= layer2_out_dout(20 - 1 downto 0);
    trunc_ln44_s_fu_424_p4 <= layer2_out_dout(219 downto 200);
    trunc_ln52_10_fu_702_p4 <= layer2_out_dout(99 downto 96);
    trunc_ln52_11_fu_818_p4 <= layer2_out_dout(147 downto 140);
    trunc_ln52_12_fu_860_p4 <= layer2_out_dout(167 downto 160);
    trunc_ln52_13_fu_744_p4 <= layer2_out_dout(119 downto 116);
    trunc_ln52_14_fu_902_p4 <= layer2_out_dout(187 downto 180);
    trunc_ln52_15_fu_944_p4 <= layer2_out_dout(207 downto 200);
    trunc_ln52_16_fu_786_p4 <= layer2_out_dout(139 downto 136);
    trunc_ln52_17_fu_986_p4 <= layer2_out_dout(227 downto 220);
    trunc_ln52_18_fu_1028_p4 <= layer2_out_dout(247 downto 240);
    trunc_ln52_19_fu_828_p4 <= layer2_out_dout(159 downto 156);
    trunc_ln52_1_fu_576_p4 <= layer2_out_dout(39 downto 36);
    trunc_ln52_20_fu_1070_p4 <= layer2_out_dout(267 downto 260);
    trunc_ln52_21_fu_1112_p4 <= layer2_out_dout(287 downto 280);
    trunc_ln52_22_fu_870_p4 <= layer2_out_dout(179 downto 176);
    trunc_ln52_23_fu_1154_p4 <= layer2_out_dout(307 downto 300);
    trunc_ln52_24_fu_1196_p4 <= layer2_out_dout(327 downto 320);
    trunc_ln52_25_fu_912_p4 <= layer2_out_dout(199 downto 196);
    trunc_ln52_26_fu_1238_p4 <= layer2_out_dout(347 downto 340);
    trunc_ln52_27_fu_1280_p4 <= layer2_out_dout(367 downto 360);
    trunc_ln52_28_fu_954_p4 <= layer2_out_dout(219 downto 216);
    trunc_ln52_29_fu_996_p4 <= layer2_out_dout(239 downto 236);
    trunc_ln52_2_fu_534_p4 <= layer2_out_dout(18 downto 16);
    trunc_ln52_30_fu_1038_p4 <= layer2_out_dout(259 downto 256);
    trunc_ln52_31_fu_1080_p4 <= layer2_out_dout(279 downto 276);
    trunc_ln52_32_fu_1122_p4 <= layer2_out_dout(299 downto 296);
    trunc_ln52_33_fu_1164_p4 <= layer2_out_dout(319 downto 316);
    trunc_ln52_34_fu_1206_p4 <= layer2_out_dout(339 downto 336);
    trunc_ln52_35_fu_1248_p4 <= layer2_out_dout(359 downto 356);
    trunc_ln52_36_fu_1290_p4 <= layer2_out_dout(379 downto 376);
    trunc_ln52_37_fu_1322_p4 <= layer2_out_dout(387 downto 380);
    trunc_ln52_38_fu_1332_p4 <= layer2_out_dout(399 downto 396);
    trunc_ln52_3_fu_566_p4 <= layer2_out_dout(27 downto 20);
    trunc_ln52_4_fu_618_p4 <= layer2_out_dout(59 downto 56);
    trunc_ln52_5_fu_734_p4 <= layer2_out_dout(107 downto 100);
    trunc_ln52_6_fu_608_p4 <= layer2_out_dout(47 downto 40);
    trunc_ln52_7_fu_660_p4 <= layer2_out_dout(79 downto 76);
    trunc_ln52_8_fu_776_p4 <= layer2_out_dout(127 downto 120);
    trunc_ln52_9_fu_650_p4 <= layer2_out_dout(67 downto 60);
    trunc_ln52_fu_530_p1 <= layer2_out_dout(8 - 1 downto 0);
    trunc_ln52_s_fu_692_p4 <= layer2_out_dout(87 downto 80);
    zext_ln57_fu_1718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_1_reg_1803),4));
end behav;
