-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_relu_array_ap_fixed_10u_array_ap_fixed_20_10_5_3_0_10u_relu_config5_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer4_out_dout : IN STD_LOGIC_VECTOR (199 downto 0);
    layer4_out_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    layer4_out_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    layer4_out_empty_n : IN STD_LOGIC;
    layer4_out_read : OUT STD_LOGIC;
    layer5_out_din : OUT STD_LOGIC_VECTOR (199 downto 0);
    layer5_out_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    layer5_out_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    layer5_out_full_n : IN STD_LOGIC;
    layer5_out_write : OUT STD_LOGIC );
end;


architecture behav of myproject_relu_array_ap_fixed_10u_array_ap_fixed_20_10_5_3_0_10u_relu_config5_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_EE : STD_LOGIC_VECTOR (7 downto 0) := "11101110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_8B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001011";
    constant ap_const_lv32_8C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001100";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_B3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110011";
    constant ap_const_lv32_B4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110100";
    constant ap_const_lv32_C7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000111";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_93 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010011";
    constant ap_const_lv32_9C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011100";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111011";
    constant ap_const_lv32_C4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000100";
    constant ap_const_lv32_BC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111100";
    constant ap_const_lv32_C3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000011";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_94 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010100";
    constant ap_const_lv32_9B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011011";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln41_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal layer4_out_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal layer5_out_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln51_fu_324_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_reg_948 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_60_fu_332_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln51_60_reg_953 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln51_61_fu_366_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_61_reg_958 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_62_fu_374_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_62_reg_963 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_63_fu_408_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_63_reg_968 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_64_fu_416_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_64_reg_973 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_65_fu_450_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_65_reg_978 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_66_fu_458_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_66_reg_983 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_67_fu_492_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_67_reg_988 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_68_fu_500_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_68_reg_993 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_69_fu_534_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_69_reg_998 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_70_fu_542_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_70_reg_1003 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_71_fu_576_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_71_reg_1008 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_72_fu_584_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_72_reg_1013 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_73_fu_618_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_73_reg_1018 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_74_fu_626_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_74_reg_1023 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_75_fu_660_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_75_reg_1028 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_76_fu_668_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_76_reg_1033 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_77_fu_702_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_77_reg_1038 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_78_fu_710_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_78_reg_1043 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_79_fu_728_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_79_reg_1048 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_80_fu_746_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_80_reg_1053 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_81_fu_764_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_81_reg_1058 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_82_fu_782_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_82_reg_1063 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_83_fu_800_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_83_reg_1068 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_84_fu_818_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_84_reg_1073 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_85_fu_836_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_85_reg_1078 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_86_fu_854_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_86_reg_1083 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_87_fu_872_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_87_reg_1088 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_88_fu_890_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_88_reg_1093 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_168 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal i_4_fu_199_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln44_fu_210_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_fu_310_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_39_fu_314_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln44_s_fu_214_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_20_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_s_fu_346_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_40_fu_356_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln44_19_fu_224_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_21_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_28_fu_388_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_41_fu_398_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln44_20_fu_234_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_22_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_29_fu_430_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_42_fu_440_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln44_21_fu_244_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_23_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_30_fu_472_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_43_fu_482_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln44_22_fu_254_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_24_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_31_fu_514_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_44_fu_524_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln44_23_fu_264_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_25_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_32_fu_556_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_45_fu_566_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln44_24_fu_274_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_26_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_33_fu_598_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_46_fu_608_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln44_25_fu_284_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_27_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_34_fu_640_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_47_fu_650_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln44_26_fu_294_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_28_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_48_fu_682_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln52_49_fu_692_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_718_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_736_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_754_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_772_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_790_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_808_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_fu_826_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_844_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_862_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_fu_880_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln57_fu_898_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_159 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component myproject_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_159)) then
                if ((icmp_ln41_fu_193_p2 = ap_const_lv1_0)) then 
                    i_fu_168 <= i_4_fu_199_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_168 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                select_ln51_60_reg_953 <= select_ln51_60_fu_332_p3;
                select_ln51_61_reg_958 <= select_ln51_61_fu_366_p3;
                select_ln51_62_reg_963 <= select_ln51_62_fu_374_p3;
                select_ln51_63_reg_968 <= select_ln51_63_fu_408_p3;
                select_ln51_64_reg_973 <= select_ln51_64_fu_416_p3;
                select_ln51_65_reg_978 <= select_ln51_65_fu_450_p3;
                select_ln51_66_reg_983 <= select_ln51_66_fu_458_p3;
                select_ln51_67_reg_988 <= select_ln51_67_fu_492_p3;
                select_ln51_68_reg_993 <= select_ln51_68_fu_500_p3;
                select_ln51_69_reg_998 <= select_ln51_69_fu_534_p3;
                select_ln51_70_reg_1003 <= select_ln51_70_fu_542_p3;
                select_ln51_71_reg_1008 <= select_ln51_71_fu_576_p3;
                select_ln51_72_reg_1013 <= select_ln51_72_fu_584_p3;
                select_ln51_73_reg_1018 <= select_ln51_73_fu_618_p3;
                select_ln51_74_reg_1023 <= select_ln51_74_fu_626_p3;
                select_ln51_75_reg_1028 <= select_ln51_75_fu_660_p3;
                select_ln51_76_reg_1033 <= select_ln51_76_fu_668_p3;
                select_ln51_77_reg_1038 <= select_ln51_77_fu_702_p3;
                select_ln51_78_reg_1043 <= select_ln51_78_fu_710_p3;
                select_ln51_79_reg_1048 <= select_ln51_79_fu_728_p3;
                select_ln51_80_reg_1053 <= select_ln51_80_fu_746_p3;
                select_ln51_81_reg_1058 <= select_ln51_81_fu_764_p3;
                select_ln51_82_reg_1063 <= select_ln51_82_fu_782_p3;
                select_ln51_83_reg_1068 <= select_ln51_83_fu_800_p3;
                select_ln51_84_reg_1073 <= select_ln51_84_fu_818_p3;
                select_ln51_85_reg_1078 <= select_ln51_85_fu_836_p3;
                select_ln51_86_reg_1083 <= select_ln51_86_fu_854_p3;
                select_ln51_87_reg_1088 <= select_ln51_87_fu_872_p3;
                select_ln51_88_reg_1093 <= select_ln51_88_fu_890_p3;
                select_ln51_reg_948 <= select_ln51_fu_324_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(layer4_out_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (layer4_out_empty_n = ap_const_logic_0);
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(layer5_out_full_n)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (layer5_out_full_n = ap_const_logic_0);
    end process;


    ap_condition_159_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_159 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln41_fu_193_p2, ap_start_int)
    begin
        if (((icmp_ln41_fu_193_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_168, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_3 <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_i_3 <= i_fu_168;
        end if; 
    end process;

    i_4_fu_199_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_3) + unsigned(ap_const_lv8_1));
    icmp_ln41_fu_193_p2 <= "1" when (ap_sig_allocacmp_i_3 = ap_const_lv8_EE) else "0";
    icmp_ln51_20_fu_340_p2 <= "1" when (signed(trunc_ln44_s_fu_214_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_21_fu_382_p2 <= "1" when (signed(trunc_ln44_19_fu_224_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_22_fu_424_p2 <= "1" when (signed(trunc_ln44_20_fu_234_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_23_fu_466_p2 <= "1" when (signed(trunc_ln44_21_fu_244_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_24_fu_508_p2 <= "1" when (signed(trunc_ln44_22_fu_254_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_25_fu_550_p2 <= "1" when (signed(trunc_ln44_23_fu_264_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_26_fu_592_p2 <= "1" when (signed(trunc_ln44_24_fu_274_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_27_fu_634_p2 <= "1" when (signed(trunc_ln44_25_fu_284_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_28_fu_676_p2 <= "1" when (signed(trunc_ln44_26_fu_294_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_fu_304_p2 <= "1" when (signed(trunc_ln44_fu_210_p1) > signed(ap_const_lv20_0)) else "0";

    layer4_out_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, layer4_out_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer4_out_blk_n <= layer4_out_empty_n;
        else 
            layer4_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer4_out_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer4_out_read <= ap_const_logic_1;
        else 
            layer4_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer5_out_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, layer5_out_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer5_out_blk_n <= layer5_out_full_n;
        else 
            layer5_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer5_out_din <= (((((((((((((((((((((((((((((select_ln51_78_reg_1043 & select_ln51_79_reg_1048) & select_ln51_77_reg_1038) & select_ln51_76_reg_1033) & select_ln51_80_reg_1053) & select_ln51_75_reg_1028) & select_ln51_74_reg_1023) & select_ln51_81_reg_1058) & select_ln51_73_reg_1018) & select_ln51_72_reg_1013) & select_ln51_82_reg_1063) & select_ln51_71_reg_1008) & select_ln51_70_reg_1003) & select_ln51_83_reg_1068) & select_ln51_69_reg_998) & select_ln51_68_reg_993) & select_ln51_84_reg_1073) & select_ln51_67_reg_988) & select_ln51_66_reg_983) & select_ln51_85_reg_1078) & select_ln51_65_reg_978) & select_ln51_64_reg_973) & select_ln51_86_reg_1083) & select_ln51_63_reg_968) & select_ln51_62_reg_963) & select_ln51_87_reg_1088) & select_ln51_61_reg_958) & zext_ln57_fu_898_p1) & select_ln51_88_reg_1093) & select_ln51_reg_948);

    layer5_out_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer5_out_write <= ap_const_logic_1;
        else 
            layer5_out_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln51_60_fu_332_p3 <= 
        trunc_ln52_39_fu_314_p4 when (icmp_ln51_fu_304_p2(0) = '1') else 
        ap_const_lv3_0;
    select_ln51_61_fu_366_p3 <= 
        trunc_ln52_s_fu_346_p4 when (icmp_ln51_20_fu_340_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_62_fu_374_p3 <= 
        trunc_ln52_40_fu_356_p4 when (icmp_ln51_20_fu_340_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln51_63_fu_408_p3 <= 
        trunc_ln52_28_fu_388_p4 when (icmp_ln51_21_fu_382_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_64_fu_416_p3 <= 
        trunc_ln52_41_fu_398_p4 when (icmp_ln51_21_fu_382_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln51_65_fu_450_p3 <= 
        trunc_ln52_29_fu_430_p4 when (icmp_ln51_22_fu_424_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_66_fu_458_p3 <= 
        trunc_ln52_42_fu_440_p4 when (icmp_ln51_22_fu_424_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln51_67_fu_492_p3 <= 
        trunc_ln52_30_fu_472_p4 when (icmp_ln51_23_fu_466_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_68_fu_500_p3 <= 
        trunc_ln52_43_fu_482_p4 when (icmp_ln51_23_fu_466_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln51_69_fu_534_p3 <= 
        trunc_ln52_31_fu_514_p4 when (icmp_ln51_24_fu_508_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_70_fu_542_p3 <= 
        trunc_ln52_44_fu_524_p4 when (icmp_ln51_24_fu_508_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln51_71_fu_576_p3 <= 
        trunc_ln52_32_fu_556_p4 when (icmp_ln51_25_fu_550_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_72_fu_584_p3 <= 
        trunc_ln52_45_fu_566_p4 when (icmp_ln51_25_fu_550_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln51_73_fu_618_p3 <= 
        trunc_ln52_33_fu_598_p4 when (icmp_ln51_26_fu_592_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_74_fu_626_p3 <= 
        trunc_ln52_46_fu_608_p4 when (icmp_ln51_26_fu_592_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln51_75_fu_660_p3 <= 
        trunc_ln52_34_fu_640_p4 when (icmp_ln51_27_fu_634_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_76_fu_668_p3 <= 
        trunc_ln52_47_fu_650_p4 when (icmp_ln51_27_fu_634_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln51_77_fu_702_p3 <= 
        trunc_ln52_48_fu_682_p4 when (icmp_ln51_28_fu_676_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_78_fu_710_p3 <= 
        trunc_ln52_49_fu_692_p4 when (icmp_ln51_28_fu_676_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln51_79_fu_728_p3 <= 
        tmp_fu_718_p4 when (icmp_ln51_28_fu_676_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_80_fu_746_p3 <= 
        tmp_s_fu_736_p4 when (icmp_ln51_27_fu_634_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_81_fu_764_p3 <= 
        tmp_19_fu_754_p4 when (icmp_ln51_26_fu_592_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_82_fu_782_p3 <= 
        tmp_20_fu_772_p4 when (icmp_ln51_25_fu_550_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_83_fu_800_p3 <= 
        tmp_21_fu_790_p4 when (icmp_ln51_24_fu_508_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_84_fu_818_p3 <= 
        tmp_22_fu_808_p4 when (icmp_ln51_23_fu_466_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_85_fu_836_p3 <= 
        tmp_23_fu_826_p4 when (icmp_ln51_22_fu_424_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_86_fu_854_p3 <= 
        tmp_24_fu_844_p4 when (icmp_ln51_21_fu_382_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_87_fu_872_p3 <= 
        tmp_25_fu_862_p4 when (icmp_ln51_20_fu_340_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_88_fu_890_p3 <= 
        tmp_26_fu_880_p4 when (icmp_ln51_fu_304_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln51_fu_324_p3 <= 
        trunc_ln52_fu_310_p1 when (icmp_ln51_fu_304_p2(0) = '1') else 
        ap_const_lv8_0;
    tmp_19_fu_754_p4 <= layer4_out_dout(155 downto 148);
    tmp_20_fu_772_p4 <= layer4_out_dout(135 downto 128);
    tmp_21_fu_790_p4 <= layer4_out_dout(115 downto 108);
    tmp_22_fu_808_p4 <= layer4_out_dout(95 downto 88);
    tmp_23_fu_826_p4 <= layer4_out_dout(75 downto 68);
    tmp_24_fu_844_p4 <= layer4_out_dout(55 downto 48);
    tmp_25_fu_862_p4 <= layer4_out_dout(35 downto 28);
    tmp_26_fu_880_p4 <= layer4_out_dout(15 downto 8);
    tmp_fu_718_p4 <= layer4_out_dout(195 downto 188);
    tmp_s_fu_736_p4 <= layer4_out_dout(175 downto 168);
    trunc_ln44_19_fu_224_p4 <= layer4_out_dout(59 downto 40);
    trunc_ln44_20_fu_234_p4 <= layer4_out_dout(79 downto 60);
    trunc_ln44_21_fu_244_p4 <= layer4_out_dout(99 downto 80);
    trunc_ln44_22_fu_254_p4 <= layer4_out_dout(119 downto 100);
    trunc_ln44_23_fu_264_p4 <= layer4_out_dout(139 downto 120);
    trunc_ln44_24_fu_274_p4 <= layer4_out_dout(159 downto 140);
    trunc_ln44_25_fu_284_p4 <= layer4_out_dout(179 downto 160);
    trunc_ln44_26_fu_294_p4 <= layer4_out_dout(199 downto 180);
    trunc_ln44_fu_210_p1 <= layer4_out_dout(20 - 1 downto 0);
    trunc_ln44_s_fu_214_p4 <= layer4_out_dout(39 downto 20);
    trunc_ln52_28_fu_388_p4 <= layer4_out_dout(47 downto 40);
    trunc_ln52_29_fu_430_p4 <= layer4_out_dout(67 downto 60);
    trunc_ln52_30_fu_472_p4 <= layer4_out_dout(87 downto 80);
    trunc_ln52_31_fu_514_p4 <= layer4_out_dout(107 downto 100);
    trunc_ln52_32_fu_556_p4 <= layer4_out_dout(127 downto 120);
    trunc_ln52_33_fu_598_p4 <= layer4_out_dout(147 downto 140);
    trunc_ln52_34_fu_640_p4 <= layer4_out_dout(167 downto 160);
    trunc_ln52_39_fu_314_p4 <= layer4_out_dout(18 downto 16);
    trunc_ln52_40_fu_356_p4 <= layer4_out_dout(39 downto 36);
    trunc_ln52_41_fu_398_p4 <= layer4_out_dout(59 downto 56);
    trunc_ln52_42_fu_440_p4 <= layer4_out_dout(79 downto 76);
    trunc_ln52_43_fu_482_p4 <= layer4_out_dout(99 downto 96);
    trunc_ln52_44_fu_524_p4 <= layer4_out_dout(119 downto 116);
    trunc_ln52_45_fu_566_p4 <= layer4_out_dout(139 downto 136);
    trunc_ln52_46_fu_608_p4 <= layer4_out_dout(159 downto 156);
    trunc_ln52_47_fu_650_p4 <= layer4_out_dout(179 downto 176);
    trunc_ln52_48_fu_682_p4 <= layer4_out_dout(187 downto 180);
    trunc_ln52_49_fu_692_p4 <= layer4_out_dout(199 downto 196);
    trunc_ln52_fu_310_p1 <= layer4_out_dout(8 - 1 downto 0);
    trunc_ln52_s_fu_346_p4 <= layer4_out_dout(27 downto 20);
    zext_ln57_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_60_reg_953),4));
end behav;
