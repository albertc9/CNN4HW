// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_relu_array_ap_fixed_10u_array_ap_fixed_20_10_5_3_0_10u_relu_config5_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        layer4_out_dout,
        layer4_out_num_data_valid,
        layer4_out_fifo_cap,
        layer4_out_empty_n,
        layer4_out_read,
        layer5_out_din,
        layer5_out_num_data_valid,
        layer5_out_fifo_cap,
        layer5_out_full_n,
        layer5_out_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [199:0] layer4_out_dout;
input  [8:0] layer4_out_num_data_valid;
input  [8:0] layer4_out_fifo_cap;
input   layer4_out_empty_n;
output   layer4_out_read;
output  [199:0] layer5_out_din;
input  [8:0] layer5_out_num_data_valid;
input  [8:0] layer5_out_fifo_cap;
input   layer5_out_full_n;
output   layer5_out_write;

reg ap_idle;
reg layer4_out_read;
reg layer5_out_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln41_fu_193_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    layer4_out_blk_n;
wire    ap_block_pp0_stage0;
reg    layer5_out_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [7:0] select_ln51_fu_324_p3;
reg   [7:0] select_ln51_reg_948;
wire   [2:0] select_ln51_60_fu_332_p3;
reg   [2:0] select_ln51_60_reg_953;
wire   [7:0] select_ln51_61_fu_366_p3;
reg   [7:0] select_ln51_61_reg_958;
wire   [3:0] select_ln51_62_fu_374_p3;
reg   [3:0] select_ln51_62_reg_963;
wire   [7:0] select_ln51_63_fu_408_p3;
reg   [7:0] select_ln51_63_reg_968;
wire   [3:0] select_ln51_64_fu_416_p3;
reg   [3:0] select_ln51_64_reg_973;
wire   [7:0] select_ln51_65_fu_450_p3;
reg   [7:0] select_ln51_65_reg_978;
wire   [3:0] select_ln51_66_fu_458_p3;
reg   [3:0] select_ln51_66_reg_983;
wire   [7:0] select_ln51_67_fu_492_p3;
reg   [7:0] select_ln51_67_reg_988;
wire   [3:0] select_ln51_68_fu_500_p3;
reg   [3:0] select_ln51_68_reg_993;
wire   [7:0] select_ln51_69_fu_534_p3;
reg   [7:0] select_ln51_69_reg_998;
wire   [3:0] select_ln51_70_fu_542_p3;
reg   [3:0] select_ln51_70_reg_1003;
wire   [7:0] select_ln51_71_fu_576_p3;
reg   [7:0] select_ln51_71_reg_1008;
wire   [3:0] select_ln51_72_fu_584_p3;
reg   [3:0] select_ln51_72_reg_1013;
wire   [7:0] select_ln51_73_fu_618_p3;
reg   [7:0] select_ln51_73_reg_1018;
wire   [3:0] select_ln51_74_fu_626_p3;
reg   [3:0] select_ln51_74_reg_1023;
wire   [7:0] select_ln51_75_fu_660_p3;
reg   [7:0] select_ln51_75_reg_1028;
wire   [3:0] select_ln51_76_fu_668_p3;
reg   [3:0] select_ln51_76_reg_1033;
wire   [7:0] select_ln51_77_fu_702_p3;
reg   [7:0] select_ln51_77_reg_1038;
wire   [3:0] select_ln51_78_fu_710_p3;
reg   [3:0] select_ln51_78_reg_1043;
wire   [7:0] select_ln51_79_fu_728_p3;
reg   [7:0] select_ln51_79_reg_1048;
wire   [7:0] select_ln51_80_fu_746_p3;
reg   [7:0] select_ln51_80_reg_1053;
wire   [7:0] select_ln51_81_fu_764_p3;
reg   [7:0] select_ln51_81_reg_1058;
wire   [7:0] select_ln51_82_fu_782_p3;
reg   [7:0] select_ln51_82_reg_1063;
wire   [7:0] select_ln51_83_fu_800_p3;
reg   [7:0] select_ln51_83_reg_1068;
wire   [7:0] select_ln51_84_fu_818_p3;
reg   [7:0] select_ln51_84_reg_1073;
wire   [7:0] select_ln51_85_fu_836_p3;
reg   [7:0] select_ln51_85_reg_1078;
wire   [7:0] select_ln51_86_fu_854_p3;
reg   [7:0] select_ln51_86_reg_1083;
wire   [7:0] select_ln51_87_fu_872_p3;
reg   [7:0] select_ln51_87_reg_1088;
wire   [7:0] select_ln51_88_fu_890_p3;
reg   [7:0] select_ln51_88_reg_1093;
reg   [7:0] i_fu_168;
wire   [7:0] i_4_fu_199_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_i_3;
reg    ap_block_pp0_stage0_01001;
wire   [19:0] trunc_ln44_fu_210_p1;
wire   [0:0] icmp_ln51_fu_304_p2;
wire   [7:0] trunc_ln52_fu_310_p1;
wire   [2:0] trunc_ln52_39_fu_314_p4;
wire   [19:0] trunc_ln44_s_fu_214_p4;
wire   [0:0] icmp_ln51_20_fu_340_p2;
wire   [7:0] trunc_ln52_s_fu_346_p4;
wire   [3:0] trunc_ln52_40_fu_356_p4;
wire   [19:0] trunc_ln44_19_fu_224_p4;
wire   [0:0] icmp_ln51_21_fu_382_p2;
wire   [7:0] trunc_ln52_28_fu_388_p4;
wire   [3:0] trunc_ln52_41_fu_398_p4;
wire   [19:0] trunc_ln44_20_fu_234_p4;
wire   [0:0] icmp_ln51_22_fu_424_p2;
wire   [7:0] trunc_ln52_29_fu_430_p4;
wire   [3:0] trunc_ln52_42_fu_440_p4;
wire   [19:0] trunc_ln44_21_fu_244_p4;
wire   [0:0] icmp_ln51_23_fu_466_p2;
wire   [7:0] trunc_ln52_30_fu_472_p4;
wire   [3:0] trunc_ln52_43_fu_482_p4;
wire   [19:0] trunc_ln44_22_fu_254_p4;
wire   [0:0] icmp_ln51_24_fu_508_p2;
wire   [7:0] trunc_ln52_31_fu_514_p4;
wire   [3:0] trunc_ln52_44_fu_524_p4;
wire   [19:0] trunc_ln44_23_fu_264_p4;
wire   [0:0] icmp_ln51_25_fu_550_p2;
wire   [7:0] trunc_ln52_32_fu_556_p4;
wire   [3:0] trunc_ln52_45_fu_566_p4;
wire   [19:0] trunc_ln44_24_fu_274_p4;
wire   [0:0] icmp_ln51_26_fu_592_p2;
wire   [7:0] trunc_ln52_33_fu_598_p4;
wire   [3:0] trunc_ln52_46_fu_608_p4;
wire   [19:0] trunc_ln44_25_fu_284_p4;
wire   [0:0] icmp_ln51_27_fu_634_p2;
wire   [7:0] trunc_ln52_34_fu_640_p4;
wire   [3:0] trunc_ln52_47_fu_650_p4;
wire   [19:0] trunc_ln44_26_fu_294_p4;
wire   [0:0] icmp_ln51_28_fu_676_p2;
wire   [7:0] trunc_ln52_48_fu_682_p4;
wire   [3:0] trunc_ln52_49_fu_692_p4;
wire   [7:0] tmp_fu_718_p4;
wire   [7:0] tmp_s_fu_736_p4;
wire   [7:0] tmp_19_fu_754_p4;
wire   [7:0] tmp_20_fu_772_p4;
wire   [7:0] tmp_21_fu_790_p4;
wire   [7:0] tmp_22_fu_808_p4;
wire   [7:0] tmp_23_fu_826_p4;
wire   [7:0] tmp_24_fu_844_p4;
wire   [7:0] tmp_25_fu_862_p4;
wire   [7:0] tmp_26_fu_880_p4;
wire   [3:0] zext_ln57_fu_898_p1;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_159;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 i_fu_168 = 8'd0;
end

myproject_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_159)) begin
        if ((icmp_ln41_fu_193_p2 == 1'd0)) begin
            i_fu_168 <= i_4_fu_199_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_168 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        select_ln51_60_reg_953 <= select_ln51_60_fu_332_p3;
        select_ln51_61_reg_958 <= select_ln51_61_fu_366_p3;
        select_ln51_62_reg_963 <= select_ln51_62_fu_374_p3;
        select_ln51_63_reg_968 <= select_ln51_63_fu_408_p3;
        select_ln51_64_reg_973 <= select_ln51_64_fu_416_p3;
        select_ln51_65_reg_978 <= select_ln51_65_fu_450_p3;
        select_ln51_66_reg_983 <= select_ln51_66_fu_458_p3;
        select_ln51_67_reg_988 <= select_ln51_67_fu_492_p3;
        select_ln51_68_reg_993 <= select_ln51_68_fu_500_p3;
        select_ln51_69_reg_998 <= select_ln51_69_fu_534_p3;
        select_ln51_70_reg_1003 <= select_ln51_70_fu_542_p3;
        select_ln51_71_reg_1008 <= select_ln51_71_fu_576_p3;
        select_ln51_72_reg_1013 <= select_ln51_72_fu_584_p3;
        select_ln51_73_reg_1018 <= select_ln51_73_fu_618_p3;
        select_ln51_74_reg_1023 <= select_ln51_74_fu_626_p3;
        select_ln51_75_reg_1028 <= select_ln51_75_fu_660_p3;
        select_ln51_76_reg_1033 <= select_ln51_76_fu_668_p3;
        select_ln51_77_reg_1038 <= select_ln51_77_fu_702_p3;
        select_ln51_78_reg_1043 <= select_ln51_78_fu_710_p3;
        select_ln51_79_reg_1048 <= select_ln51_79_fu_728_p3;
        select_ln51_80_reg_1053 <= select_ln51_80_fu_746_p3;
        select_ln51_81_reg_1058 <= select_ln51_81_fu_764_p3;
        select_ln51_82_reg_1063 <= select_ln51_82_fu_782_p3;
        select_ln51_83_reg_1068 <= select_ln51_83_fu_800_p3;
        select_ln51_84_reg_1073 <= select_ln51_84_fu_818_p3;
        select_ln51_85_reg_1078 <= select_ln51_85_fu_836_p3;
        select_ln51_86_reg_1083 <= select_ln51_86_fu_854_p3;
        select_ln51_87_reg_1088 <= select_ln51_87_fu_872_p3;
        select_ln51_88_reg_1093 <= select_ln51_88_fu_890_p3;
        select_ln51_reg_948 <= select_ln51_fu_324_p3;
    end
end

always @ (*) begin
    if (((icmp_ln41_fu_193_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_3 = 8'd0;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_168;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer4_out_blk_n = layer4_out_empty_n;
    end else begin
        layer4_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer4_out_read = 1'b1;
    end else begin
        layer4_out_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        layer5_out_blk_n = layer5_out_full_n;
    end else begin
        layer5_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        layer5_out_write = 1'b1;
    end else begin
        layer5_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (layer4_out_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (layer5_out_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_159 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_4_fu_199_p2 = (ap_sig_allocacmp_i_3 + 8'd1);

assign icmp_ln41_fu_193_p2 = ((ap_sig_allocacmp_i_3 == 8'd238) ? 1'b1 : 1'b0);

assign icmp_ln51_20_fu_340_p2 = (($signed(trunc_ln44_s_fu_214_p4) > $signed(20'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_21_fu_382_p2 = (($signed(trunc_ln44_19_fu_224_p4) > $signed(20'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_22_fu_424_p2 = (($signed(trunc_ln44_20_fu_234_p4) > $signed(20'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_23_fu_466_p2 = (($signed(trunc_ln44_21_fu_244_p4) > $signed(20'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_24_fu_508_p2 = (($signed(trunc_ln44_22_fu_254_p4) > $signed(20'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_25_fu_550_p2 = (($signed(trunc_ln44_23_fu_264_p4) > $signed(20'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_26_fu_592_p2 = (($signed(trunc_ln44_24_fu_274_p4) > $signed(20'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_27_fu_634_p2 = (($signed(trunc_ln44_25_fu_284_p4) > $signed(20'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_28_fu_676_p2 = (($signed(trunc_ln44_26_fu_294_p4) > $signed(20'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_304_p2 = (($signed(trunc_ln44_fu_210_p1) > $signed(20'd0)) ? 1'b1 : 1'b0);

assign layer5_out_din = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{select_ln51_78_reg_1043}, {select_ln51_79_reg_1048}}, {select_ln51_77_reg_1038}}, {select_ln51_76_reg_1033}}, {select_ln51_80_reg_1053}}, {select_ln51_75_reg_1028}}, {select_ln51_74_reg_1023}}, {select_ln51_81_reg_1058}}, {select_ln51_73_reg_1018}}, {select_ln51_72_reg_1013}}, {select_ln51_82_reg_1063}}, {select_ln51_71_reg_1008}}, {select_ln51_70_reg_1003}}, {select_ln51_83_reg_1068}}, {select_ln51_69_reg_998}}, {select_ln51_68_reg_993}}, {select_ln51_84_reg_1073}}, {select_ln51_67_reg_988}}, {select_ln51_66_reg_983}}, {select_ln51_85_reg_1078}}, {select_ln51_65_reg_978}}, {select_ln51_64_reg_973}}, {select_ln51_86_reg_1083}}, {select_ln51_63_reg_968}}, {select_ln51_62_reg_963}}, {select_ln51_87_reg_1088}}, {select_ln51_61_reg_958}}, {zext_ln57_fu_898_p1}}, {select_ln51_88_reg_1093}}, {select_ln51_reg_948}};

assign select_ln51_60_fu_332_p3 = ((icmp_ln51_fu_304_p2[0:0] == 1'b1) ? trunc_ln52_39_fu_314_p4 : 3'd0);

assign select_ln51_61_fu_366_p3 = ((icmp_ln51_20_fu_340_p2[0:0] == 1'b1) ? trunc_ln52_s_fu_346_p4 : 8'd0);

assign select_ln51_62_fu_374_p3 = ((icmp_ln51_20_fu_340_p2[0:0] == 1'b1) ? trunc_ln52_40_fu_356_p4 : 4'd0);

assign select_ln51_63_fu_408_p3 = ((icmp_ln51_21_fu_382_p2[0:0] == 1'b1) ? trunc_ln52_28_fu_388_p4 : 8'd0);

assign select_ln51_64_fu_416_p3 = ((icmp_ln51_21_fu_382_p2[0:0] == 1'b1) ? trunc_ln52_41_fu_398_p4 : 4'd0);

assign select_ln51_65_fu_450_p3 = ((icmp_ln51_22_fu_424_p2[0:0] == 1'b1) ? trunc_ln52_29_fu_430_p4 : 8'd0);

assign select_ln51_66_fu_458_p3 = ((icmp_ln51_22_fu_424_p2[0:0] == 1'b1) ? trunc_ln52_42_fu_440_p4 : 4'd0);

assign select_ln51_67_fu_492_p3 = ((icmp_ln51_23_fu_466_p2[0:0] == 1'b1) ? trunc_ln52_30_fu_472_p4 : 8'd0);

assign select_ln51_68_fu_500_p3 = ((icmp_ln51_23_fu_466_p2[0:0] == 1'b1) ? trunc_ln52_43_fu_482_p4 : 4'd0);

assign select_ln51_69_fu_534_p3 = ((icmp_ln51_24_fu_508_p2[0:0] == 1'b1) ? trunc_ln52_31_fu_514_p4 : 8'd0);

assign select_ln51_70_fu_542_p3 = ((icmp_ln51_24_fu_508_p2[0:0] == 1'b1) ? trunc_ln52_44_fu_524_p4 : 4'd0);

assign select_ln51_71_fu_576_p3 = ((icmp_ln51_25_fu_550_p2[0:0] == 1'b1) ? trunc_ln52_32_fu_556_p4 : 8'd0);

assign select_ln51_72_fu_584_p3 = ((icmp_ln51_25_fu_550_p2[0:0] == 1'b1) ? trunc_ln52_45_fu_566_p4 : 4'd0);

assign select_ln51_73_fu_618_p3 = ((icmp_ln51_26_fu_592_p2[0:0] == 1'b1) ? trunc_ln52_33_fu_598_p4 : 8'd0);

assign select_ln51_74_fu_626_p3 = ((icmp_ln51_26_fu_592_p2[0:0] == 1'b1) ? trunc_ln52_46_fu_608_p4 : 4'd0);

assign select_ln51_75_fu_660_p3 = ((icmp_ln51_27_fu_634_p2[0:0] == 1'b1) ? trunc_ln52_34_fu_640_p4 : 8'd0);

assign select_ln51_76_fu_668_p3 = ((icmp_ln51_27_fu_634_p2[0:0] == 1'b1) ? trunc_ln52_47_fu_650_p4 : 4'd0);

assign select_ln51_77_fu_702_p3 = ((icmp_ln51_28_fu_676_p2[0:0] == 1'b1) ? trunc_ln52_48_fu_682_p4 : 8'd0);

assign select_ln51_78_fu_710_p3 = ((icmp_ln51_28_fu_676_p2[0:0] == 1'b1) ? trunc_ln52_49_fu_692_p4 : 4'd0);

assign select_ln51_79_fu_728_p3 = ((icmp_ln51_28_fu_676_p2[0:0] == 1'b1) ? tmp_fu_718_p4 : 8'd0);

assign select_ln51_80_fu_746_p3 = ((icmp_ln51_27_fu_634_p2[0:0] == 1'b1) ? tmp_s_fu_736_p4 : 8'd0);

assign select_ln51_81_fu_764_p3 = ((icmp_ln51_26_fu_592_p2[0:0] == 1'b1) ? tmp_19_fu_754_p4 : 8'd0);

assign select_ln51_82_fu_782_p3 = ((icmp_ln51_25_fu_550_p2[0:0] == 1'b1) ? tmp_20_fu_772_p4 : 8'd0);

assign select_ln51_83_fu_800_p3 = ((icmp_ln51_24_fu_508_p2[0:0] == 1'b1) ? tmp_21_fu_790_p4 : 8'd0);

assign select_ln51_84_fu_818_p3 = ((icmp_ln51_23_fu_466_p2[0:0] == 1'b1) ? tmp_22_fu_808_p4 : 8'd0);

assign select_ln51_85_fu_836_p3 = ((icmp_ln51_22_fu_424_p2[0:0] == 1'b1) ? tmp_23_fu_826_p4 : 8'd0);

assign select_ln51_86_fu_854_p3 = ((icmp_ln51_21_fu_382_p2[0:0] == 1'b1) ? tmp_24_fu_844_p4 : 8'd0);

assign select_ln51_87_fu_872_p3 = ((icmp_ln51_20_fu_340_p2[0:0] == 1'b1) ? tmp_25_fu_862_p4 : 8'd0);

assign select_ln51_88_fu_890_p3 = ((icmp_ln51_fu_304_p2[0:0] == 1'b1) ? tmp_26_fu_880_p4 : 8'd0);

assign select_ln51_fu_324_p3 = ((icmp_ln51_fu_304_p2[0:0] == 1'b1) ? trunc_ln52_fu_310_p1 : 8'd0);

assign tmp_19_fu_754_p4 = {{layer4_out_dout[155:148]}};

assign tmp_20_fu_772_p4 = {{layer4_out_dout[135:128]}};

assign tmp_21_fu_790_p4 = {{layer4_out_dout[115:108]}};

assign tmp_22_fu_808_p4 = {{layer4_out_dout[95:88]}};

assign tmp_23_fu_826_p4 = {{layer4_out_dout[75:68]}};

assign tmp_24_fu_844_p4 = {{layer4_out_dout[55:48]}};

assign tmp_25_fu_862_p4 = {{layer4_out_dout[35:28]}};

assign tmp_26_fu_880_p4 = {{layer4_out_dout[15:8]}};

assign tmp_fu_718_p4 = {{layer4_out_dout[195:188]}};

assign tmp_s_fu_736_p4 = {{layer4_out_dout[175:168]}};

assign trunc_ln44_19_fu_224_p4 = {{layer4_out_dout[59:40]}};

assign trunc_ln44_20_fu_234_p4 = {{layer4_out_dout[79:60]}};

assign trunc_ln44_21_fu_244_p4 = {{layer4_out_dout[99:80]}};

assign trunc_ln44_22_fu_254_p4 = {{layer4_out_dout[119:100]}};

assign trunc_ln44_23_fu_264_p4 = {{layer4_out_dout[139:120]}};

assign trunc_ln44_24_fu_274_p4 = {{layer4_out_dout[159:140]}};

assign trunc_ln44_25_fu_284_p4 = {{layer4_out_dout[179:160]}};

assign trunc_ln44_26_fu_294_p4 = {{layer4_out_dout[199:180]}};

assign trunc_ln44_fu_210_p1 = layer4_out_dout[19:0];

assign trunc_ln44_s_fu_214_p4 = {{layer4_out_dout[39:20]}};

assign trunc_ln52_28_fu_388_p4 = {{layer4_out_dout[47:40]}};

assign trunc_ln52_29_fu_430_p4 = {{layer4_out_dout[67:60]}};

assign trunc_ln52_30_fu_472_p4 = {{layer4_out_dout[87:80]}};

assign trunc_ln52_31_fu_514_p4 = {{layer4_out_dout[107:100]}};

assign trunc_ln52_32_fu_556_p4 = {{layer4_out_dout[127:120]}};

assign trunc_ln52_33_fu_598_p4 = {{layer4_out_dout[147:140]}};

assign trunc_ln52_34_fu_640_p4 = {{layer4_out_dout[167:160]}};

assign trunc_ln52_39_fu_314_p4 = {{layer4_out_dout[18:16]}};

assign trunc_ln52_40_fu_356_p4 = {{layer4_out_dout[39:36]}};

assign trunc_ln52_41_fu_398_p4 = {{layer4_out_dout[59:56]}};

assign trunc_ln52_42_fu_440_p4 = {{layer4_out_dout[79:76]}};

assign trunc_ln52_43_fu_482_p4 = {{layer4_out_dout[99:96]}};

assign trunc_ln52_44_fu_524_p4 = {{layer4_out_dout[119:116]}};

assign trunc_ln52_45_fu_566_p4 = {{layer4_out_dout[139:136]}};

assign trunc_ln52_46_fu_608_p4 = {{layer4_out_dout[159:156]}};

assign trunc_ln52_47_fu_650_p4 = {{layer4_out_dout[179:176]}};

assign trunc_ln52_48_fu_682_p4 = {{layer4_out_dout[187:180]}};

assign trunc_ln52_49_fu_692_p4 = {{layer4_out_dout[199:196]}};

assign trunc_ln52_fu_310_p1 = layer4_out_dout[7:0];

assign trunc_ln52_s_fu_346_p4 = {{layer4_out_dout[27:20]}};

assign zext_ln57_fu_898_p1 = select_ln51_60_reg_953;

endmodule //myproject_relu_array_ap_fixed_10u_array_ap_fixed_20_10_5_3_0_10u_relu_config5_s
