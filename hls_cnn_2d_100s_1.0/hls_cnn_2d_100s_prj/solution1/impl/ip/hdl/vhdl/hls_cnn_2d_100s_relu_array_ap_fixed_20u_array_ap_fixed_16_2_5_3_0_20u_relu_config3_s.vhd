-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_cnn_2d_100s_relu_array_ap_fixed_20u_array_ap_fixed_16_2_5_3_0_20u_relu_config3_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer2_out_dout : IN STD_LOGIC_VECTOR (239 downto 0);
    layer2_out_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    layer2_out_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    layer2_out_empty_n : IN STD_LOGIC;
    layer2_out_read : OUT STD_LOGIC;
    layer3_out_din : OUT STD_LOGIC_VECTOR (319 downto 0);
    layer3_out_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    layer3_out_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    layer3_out_full_n : IN STD_LOGIC;
    layer3_out_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC );
end;


architecture behav of hls_cnn_2d_100s_relu_array_ap_fixed_20u_array_ap_fixed_16_2_5_3_0_20u_relu_config3_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_F7 : STD_LOGIC_VECTOR (7 downto 0) := "11110111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000011";
    constant ap_const_lv32_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000100";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011011";
    constant ap_const_lv32_9C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011100";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_B3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110011";
    constant ap_const_lv32_B4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110100";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001011";
    constant ap_const_lv32_CC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001100";
    constant ap_const_lv32_D7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010111";
    constant ap_const_lv32_D8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011000";
    constant ap_const_lv32_E3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100011";
    constant ap_const_lv32_E4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100100";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_82 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000010";
    constant ap_const_lv32_8E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001110";
    constant ap_const_lv32_9A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011010";
    constant ap_const_lv32_A6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100110";
    constant ap_const_lv32_B2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110010";
    constant ap_const_lv32_BE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111110";
    constant ap_const_lv32_CA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001010";
    constant ap_const_lv32_D6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010110";
    constant ap_const_lv32_E2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100010";
    constant ap_const_lv32_EE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln41_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal layer2_out_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal layer3_out_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln51_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_1130 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_fu_406_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln52_reg_1135 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_1_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_1_reg_1140 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1145 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_2_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_2_reg_1150 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_1155 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_3_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_3_reg_1160 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1165 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_4_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_4_reg_1170 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1175 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_5_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_5_reg_1180 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1185 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_6_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_6_reg_1190 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1195 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_7_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_7_reg_1200 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_1205 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_8_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_8_reg_1210 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_1215 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_9_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_9_reg_1220 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_1225 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_10_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_10_reg_1230 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_1235 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_11_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_11_reg_1240 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_1245 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_12_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_12_reg_1250 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_1255 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_13_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_13_reg_1260 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_1265 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_14_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_14_reg_1270 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_1275 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_15_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_15_reg_1280 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_1285 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_16_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_16_reg_1290 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_1295 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_17_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_17_reg_1300 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_1305 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_18_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_18_reg_1310 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_1315 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_19_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_19_reg_1320 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_1325 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_fu_164 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal i_2_fu_195_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln44_fu_206_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln44_1_fu_210_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln44_2_fu_220_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln44_3_fu_230_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln44_4_fu_240_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln44_5_fu_250_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln44_6_fu_260_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln44_7_fu_270_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln44_8_fu_280_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln44_9_fu_290_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln44_s_fu_300_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln44_10_fu_310_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln44_11_fu_320_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln44_12_fu_330_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln44_13_fu_340_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln44_14_fu_350_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln44_15_fu_360_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln44_16_fu_370_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln44_17_fu_380_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln44_18_fu_390_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal out_data_fu_714_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_1_fu_721_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_2_fu_732_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_3_fu_739_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_4_fu_750_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_5_fu_757_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_6_fu_768_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_7_fu_775_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln_fu_786_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_fu_793_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln52_1_fu_804_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_1_fu_811_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln52_2_fu_822_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_2_fu_829_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln52_3_fu_840_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_3_fu_847_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln52_4_fu_858_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_4_fu_865_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln52_5_fu_876_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_5_fu_883_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln52_6_fu_894_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_6_fu_901_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln52_7_fu_912_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_7_fu_919_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln52_8_fu_930_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_8_fu_937_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln52_9_fu_948_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_9_fu_955_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln52_s_fu_966_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_10_fu_973_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln52_10_fu_984_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_11_fu_991_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln52_11_fu_1002_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_12_fu_1009_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln52_12_fu_1020_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_13_fu_1027_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln52_13_fu_1038_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_14_fu_1045_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln52_14_fu_1056_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_15_fu_1063_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln51_14_fu_1052_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_13_fu_1034_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_12_fu_1016_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_11_fu_998_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_10_fu_980_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_9_fu_962_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_8_fu_944_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_7_fu_926_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_6_fu_908_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_5_fu_890_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_4_fu_872_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_3_fu_854_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_2_fu_836_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_1_fu_818_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_fu_800_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_3_fu_782_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_2_fu_764_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_1_fu_746_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_fu_728_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln57_s_fu_1070_p21 : STD_LOGIC_VECTOR (318 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_193 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component hls_cnn_2d_100s_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component hls_cnn_2d_100s_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_193)) then
                if ((icmp_ln41_fu_189_p2 = ap_const_lv1_0)) then 
                    i_fu_164 <= i_2_fu_195_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_164 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln51_10_reg_1230 <= icmp_ln51_10_fu_554_p2;
                icmp_ln51_11_reg_1240 <= icmp_ln51_11_fu_570_p2;
                icmp_ln51_12_reg_1250 <= icmp_ln51_12_fu_586_p2;
                icmp_ln51_13_reg_1260 <= icmp_ln51_13_fu_602_p2;
                icmp_ln51_14_reg_1270 <= icmp_ln51_14_fu_618_p2;
                icmp_ln51_15_reg_1280 <= icmp_ln51_15_fu_634_p2;
                icmp_ln51_16_reg_1290 <= icmp_ln51_16_fu_650_p2;
                icmp_ln51_17_reg_1300 <= icmp_ln51_17_fu_666_p2;
                icmp_ln51_18_reg_1310 <= icmp_ln51_18_fu_682_p2;
                icmp_ln51_19_reg_1320 <= icmp_ln51_19_fu_698_p2;
                icmp_ln51_1_reg_1140 <= icmp_ln51_1_fu_410_p2;
                icmp_ln51_2_reg_1150 <= icmp_ln51_2_fu_426_p2;
                icmp_ln51_3_reg_1160 <= icmp_ln51_3_fu_442_p2;
                icmp_ln51_4_reg_1170 <= icmp_ln51_4_fu_458_p2;
                icmp_ln51_5_reg_1180 <= icmp_ln51_5_fu_474_p2;
                icmp_ln51_6_reg_1190 <= icmp_ln51_6_fu_490_p2;
                icmp_ln51_7_reg_1200 <= icmp_ln51_7_fu_506_p2;
                icmp_ln51_8_reg_1210 <= icmp_ln51_8_fu_522_p2;
                icmp_ln51_9_reg_1220 <= icmp_ln51_9_fu_538_p2;
                icmp_ln51_reg_1130 <= icmp_ln51_fu_400_p2;
                tmp_10_reg_1245 <= layer2_out_dout(142 downto 132);
                tmp_11_reg_1255 <= layer2_out_dout(154 downto 144);
                tmp_12_reg_1265 <= layer2_out_dout(166 downto 156);
                tmp_13_reg_1275 <= layer2_out_dout(178 downto 168);
                tmp_14_reg_1285 <= layer2_out_dout(190 downto 180);
                tmp_15_reg_1295 <= layer2_out_dout(202 downto 192);
                tmp_16_reg_1305 <= layer2_out_dout(214 downto 204);
                tmp_17_reg_1315 <= layer2_out_dout(226 downto 216);
                tmp_18_reg_1325 <= layer2_out_dout(238 downto 228);
                tmp_1_reg_1145 <= layer2_out_dout(22 downto 12);
                tmp_2_reg_1155 <= layer2_out_dout(34 downto 24);
                tmp_3_reg_1165 <= layer2_out_dout(46 downto 36);
                tmp_4_reg_1175 <= layer2_out_dout(58 downto 48);
                tmp_5_reg_1185 <= layer2_out_dout(70 downto 60);
                tmp_6_reg_1195 <= layer2_out_dout(82 downto 72);
                tmp_7_reg_1205 <= layer2_out_dout(94 downto 84);
                tmp_8_reg_1215 <= layer2_out_dout(106 downto 96);
                tmp_9_reg_1225 <= layer2_out_dout(118 downto 108);
                tmp_s_reg_1235 <= layer2_out_dout(130 downto 120);
                trunc_ln52_reg_1135 <= trunc_ln52_fu_406_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(layer2_out_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (layer2_out_empty_n = ap_const_logic_0);
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(layer3_out_full_n)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (layer3_out_full_n = ap_const_logic_0);
    end process;


    ap_condition_193_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_193 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln41_fu_189_p2, ap_start_int)
    begin
        if (((icmp_ln41_fu_189_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_164, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_164;
        end if; 
    end process;

    i_2_fu_195_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv8_1));
    icmp_ln41_fu_189_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv8_F7) else "0";
    icmp_ln51_10_fu_554_p2 <= "1" when (signed(trunc_ln44_s_fu_300_p4) > signed(ap_const_lv12_0)) else "0";
    icmp_ln51_11_fu_570_p2 <= "1" when (signed(trunc_ln44_10_fu_310_p4) > signed(ap_const_lv12_0)) else "0";
    icmp_ln51_12_fu_586_p2 <= "1" when (signed(trunc_ln44_11_fu_320_p4) > signed(ap_const_lv12_0)) else "0";
    icmp_ln51_13_fu_602_p2 <= "1" when (signed(trunc_ln44_12_fu_330_p4) > signed(ap_const_lv12_0)) else "0";
    icmp_ln51_14_fu_618_p2 <= "1" when (signed(trunc_ln44_13_fu_340_p4) > signed(ap_const_lv12_0)) else "0";
    icmp_ln51_15_fu_634_p2 <= "1" when (signed(trunc_ln44_14_fu_350_p4) > signed(ap_const_lv12_0)) else "0";
    icmp_ln51_16_fu_650_p2 <= "1" when (signed(trunc_ln44_15_fu_360_p4) > signed(ap_const_lv12_0)) else "0";
    icmp_ln51_17_fu_666_p2 <= "1" when (signed(trunc_ln44_16_fu_370_p4) > signed(ap_const_lv12_0)) else "0";
    icmp_ln51_18_fu_682_p2 <= "1" when (signed(trunc_ln44_17_fu_380_p4) > signed(ap_const_lv12_0)) else "0";
    icmp_ln51_19_fu_698_p2 <= "1" when (signed(trunc_ln44_18_fu_390_p4) > signed(ap_const_lv12_0)) else "0";
    icmp_ln51_1_fu_410_p2 <= "1" when (signed(trunc_ln44_1_fu_210_p4) > signed(ap_const_lv12_0)) else "0";
    icmp_ln51_2_fu_426_p2 <= "1" when (signed(trunc_ln44_2_fu_220_p4) > signed(ap_const_lv12_0)) else "0";
    icmp_ln51_3_fu_442_p2 <= "1" when (signed(trunc_ln44_3_fu_230_p4) > signed(ap_const_lv12_0)) else "0";
    icmp_ln51_4_fu_458_p2 <= "1" when (signed(trunc_ln44_4_fu_240_p4) > signed(ap_const_lv12_0)) else "0";
    icmp_ln51_5_fu_474_p2 <= "1" when (signed(trunc_ln44_5_fu_250_p4) > signed(ap_const_lv12_0)) else "0";
    icmp_ln51_6_fu_490_p2 <= "1" when (signed(trunc_ln44_6_fu_260_p4) > signed(ap_const_lv12_0)) else "0";
    icmp_ln51_7_fu_506_p2 <= "1" when (signed(trunc_ln44_7_fu_270_p4) > signed(ap_const_lv12_0)) else "0";
    icmp_ln51_8_fu_522_p2 <= "1" when (signed(trunc_ln44_8_fu_280_p4) > signed(ap_const_lv12_0)) else "0";
    icmp_ln51_9_fu_538_p2 <= "1" when (signed(trunc_ln44_9_fu_290_p4) > signed(ap_const_lv12_0)) else "0";
    icmp_ln51_fu_400_p2 <= "1" when (signed(trunc_ln44_fu_206_p1) > signed(ap_const_lv12_0)) else "0";

    layer2_out_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, layer2_out_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_out_blk_n <= layer2_out_empty_n;
        else 
            layer2_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer2_out_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_out_read <= ap_const_logic_1;
        else 
            layer2_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer3_out_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, layer3_out_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer3_out_blk_n <= layer3_out_full_n;
        else 
            layer3_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer3_out_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln57_s_fu_1070_p21),320));

    layer3_out_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer3_out_write <= ap_const_logic_1;
        else 
            layer3_out_write <= ap_const_logic_0;
        end if; 
    end process;

    or_ln57_s_fu_1070_p21 <= (((((((((((((((((((select_ln51_15_fu_1063_p3 & zext_ln51_14_fu_1052_p1) & zext_ln51_13_fu_1034_p1) & zext_ln51_12_fu_1016_p1) & zext_ln51_11_fu_998_p1) & zext_ln51_10_fu_980_p1) & zext_ln51_9_fu_962_p1) & zext_ln51_8_fu_944_p1) & zext_ln51_7_fu_926_p1) & zext_ln51_6_fu_908_p1) & zext_ln51_5_fu_890_p1) & zext_ln51_4_fu_872_p1) & zext_ln51_3_fu_854_p1) & zext_ln51_2_fu_836_p1) & zext_ln51_1_fu_818_p1) & zext_ln51_fu_800_p1) & zext_ln45_3_fu_782_p1) & zext_ln45_2_fu_764_p1) & zext_ln45_1_fu_746_p1) & zext_ln45_fu_728_p1);
    out_data_1_fu_721_p3 <= 
        out_data_fu_714_p3 when (icmp_ln51_reg_1130(0) = '1') else 
        ap_const_lv15_0;
    out_data_2_fu_732_p3 <= (tmp_1_reg_1145 & ap_const_lv4_0);
    out_data_3_fu_739_p3 <= 
        out_data_2_fu_732_p3 when (icmp_ln51_1_reg_1140(0) = '1') else 
        ap_const_lv15_0;
    out_data_4_fu_750_p3 <= (tmp_2_reg_1155 & ap_const_lv4_0);
    out_data_5_fu_757_p3 <= 
        out_data_4_fu_750_p3 when (icmp_ln51_2_reg_1150(0) = '1') else 
        ap_const_lv15_0;
    out_data_6_fu_768_p3 <= (tmp_3_reg_1165 & ap_const_lv4_0);
    out_data_7_fu_775_p3 <= 
        out_data_6_fu_768_p3 when (icmp_ln51_3_reg_1160(0) = '1') else 
        ap_const_lv15_0;
    out_data_fu_714_p3 <= (trunc_ln52_reg_1135 & ap_const_lv4_0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln51_10_fu_973_p3 <= 
        shl_ln52_s_fu_966_p3 when (icmp_ln51_14_reg_1270(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_11_fu_991_p3 <= 
        shl_ln52_10_fu_984_p3 when (icmp_ln51_15_reg_1280(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_12_fu_1009_p3 <= 
        shl_ln52_11_fu_1002_p3 when (icmp_ln51_16_reg_1290(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_13_fu_1027_p3 <= 
        shl_ln52_12_fu_1020_p3 when (icmp_ln51_17_reg_1300(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_14_fu_1045_p3 <= 
        shl_ln52_13_fu_1038_p3 when (icmp_ln51_18_reg_1310(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_15_fu_1063_p3 <= 
        shl_ln52_14_fu_1056_p3 when (icmp_ln51_19_reg_1320(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_1_fu_811_p3 <= 
        shl_ln52_1_fu_804_p3 when (icmp_ln51_5_reg_1180(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_2_fu_829_p3 <= 
        shl_ln52_2_fu_822_p3 when (icmp_ln51_6_reg_1190(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_3_fu_847_p3 <= 
        shl_ln52_3_fu_840_p3 when (icmp_ln51_7_reg_1200(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_4_fu_865_p3 <= 
        shl_ln52_4_fu_858_p3 when (icmp_ln51_8_reg_1210(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_5_fu_883_p3 <= 
        shl_ln52_5_fu_876_p3 when (icmp_ln51_9_reg_1220(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_6_fu_901_p3 <= 
        shl_ln52_6_fu_894_p3 when (icmp_ln51_10_reg_1230(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_7_fu_919_p3 <= 
        shl_ln52_7_fu_912_p3 when (icmp_ln51_11_reg_1240(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_8_fu_937_p3 <= 
        shl_ln52_8_fu_930_p3 when (icmp_ln51_12_reg_1250(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_9_fu_955_p3 <= 
        shl_ln52_9_fu_948_p3 when (icmp_ln51_13_reg_1260(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_fu_793_p3 <= 
        shl_ln_fu_786_p3 when (icmp_ln51_4_reg_1170(0) = '1') else 
        ap_const_lv15_0;
    shl_ln52_10_fu_984_p3 <= (tmp_14_reg_1285 & ap_const_lv4_0);
    shl_ln52_11_fu_1002_p3 <= (tmp_15_reg_1295 & ap_const_lv4_0);
    shl_ln52_12_fu_1020_p3 <= (tmp_16_reg_1305 & ap_const_lv4_0);
    shl_ln52_13_fu_1038_p3 <= (tmp_17_reg_1315 & ap_const_lv4_0);
    shl_ln52_14_fu_1056_p3 <= (tmp_18_reg_1325 & ap_const_lv4_0);
    shl_ln52_1_fu_804_p3 <= (tmp_5_reg_1185 & ap_const_lv4_0);
    shl_ln52_2_fu_822_p3 <= (tmp_6_reg_1195 & ap_const_lv4_0);
    shl_ln52_3_fu_840_p3 <= (tmp_7_reg_1205 & ap_const_lv4_0);
    shl_ln52_4_fu_858_p3 <= (tmp_8_reg_1215 & ap_const_lv4_0);
    shl_ln52_5_fu_876_p3 <= (tmp_9_reg_1225 & ap_const_lv4_0);
    shl_ln52_6_fu_894_p3 <= (tmp_s_reg_1235 & ap_const_lv4_0);
    shl_ln52_7_fu_912_p3 <= (tmp_10_reg_1245 & ap_const_lv4_0);
    shl_ln52_8_fu_930_p3 <= (tmp_11_reg_1255 & ap_const_lv4_0);
    shl_ln52_9_fu_948_p3 <= (tmp_12_reg_1265 & ap_const_lv4_0);
    shl_ln52_s_fu_966_p3 <= (tmp_13_reg_1275 & ap_const_lv4_0);
    shl_ln_fu_786_p3 <= (tmp_4_reg_1175 & ap_const_lv4_0);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln44_10_fu_310_p4 <= layer2_out_dout(143 downto 132);
    trunc_ln44_11_fu_320_p4 <= layer2_out_dout(155 downto 144);
    trunc_ln44_12_fu_330_p4 <= layer2_out_dout(167 downto 156);
    trunc_ln44_13_fu_340_p4 <= layer2_out_dout(179 downto 168);
    trunc_ln44_14_fu_350_p4 <= layer2_out_dout(191 downto 180);
    trunc_ln44_15_fu_360_p4 <= layer2_out_dout(203 downto 192);
    trunc_ln44_16_fu_370_p4 <= layer2_out_dout(215 downto 204);
    trunc_ln44_17_fu_380_p4 <= layer2_out_dout(227 downto 216);
    trunc_ln44_18_fu_390_p4 <= layer2_out_dout(239 downto 228);
    trunc_ln44_1_fu_210_p4 <= layer2_out_dout(23 downto 12);
    trunc_ln44_2_fu_220_p4 <= layer2_out_dout(35 downto 24);
    trunc_ln44_3_fu_230_p4 <= layer2_out_dout(47 downto 36);
    trunc_ln44_4_fu_240_p4 <= layer2_out_dout(59 downto 48);
    trunc_ln44_5_fu_250_p4 <= layer2_out_dout(71 downto 60);
    trunc_ln44_6_fu_260_p4 <= layer2_out_dout(83 downto 72);
    trunc_ln44_7_fu_270_p4 <= layer2_out_dout(95 downto 84);
    trunc_ln44_8_fu_280_p4 <= layer2_out_dout(107 downto 96);
    trunc_ln44_9_fu_290_p4 <= layer2_out_dout(119 downto 108);
    trunc_ln44_fu_206_p1 <= layer2_out_dout(12 - 1 downto 0);
    trunc_ln44_s_fu_300_p4 <= layer2_out_dout(131 downto 120);
    trunc_ln52_fu_406_p1 <= layer2_out_dout(11 - 1 downto 0);
    zext_ln45_1_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_3_fu_739_p3),16));
    zext_ln45_2_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_5_fu_757_p3),16));
    zext_ln45_3_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_7_fu_775_p3),16));
    zext_ln45_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_1_fu_721_p3),16));
    zext_ln51_10_fu_980_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_10_fu_973_p3),16));
    zext_ln51_11_fu_998_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_11_fu_991_p3),16));
    zext_ln51_12_fu_1016_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_12_fu_1009_p3),16));
    zext_ln51_13_fu_1034_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_13_fu_1027_p3),16));
    zext_ln51_14_fu_1052_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_14_fu_1045_p3),16));
    zext_ln51_1_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_1_fu_811_p3),16));
    zext_ln51_2_fu_836_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_2_fu_829_p3),16));
    zext_ln51_3_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_3_fu_847_p3),16));
    zext_ln51_4_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_4_fu_865_p3),16));
    zext_ln51_5_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_5_fu_883_p3),16));
    zext_ln51_6_fu_908_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_6_fu_901_p3),16));
    zext_ln51_7_fu_926_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_7_fu_919_p3),16));
    zext_ln51_8_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_8_fu_937_p3),16));
    zext_ln51_9_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_9_fu_955_p3),16));
    zext_ln51_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_fu_793_p3),16));
end behav;
