// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module hls_cnn_2d_100s_relu_array_ap_fixed_10u_array_ap_fixed_16_2_5_3_0_10u_relu_config5_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        layer4_out_dout,
        layer4_out_num_data_valid,
        layer4_out_fifo_cap,
        layer4_out_empty_n,
        layer4_out_read,
        layer5_out_din,
        layer5_out_num_data_valid,
        layer5_out_fifo_cap,
        layer5_out_full_n,
        layer5_out_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [119:0] layer4_out_dout;
input  [8:0] layer4_out_num_data_valid;
input  [8:0] layer4_out_fifo_cap;
input   layer4_out_empty_n;
output   layer4_out_read;
output  [159:0] layer5_out_din;
input  [8:0] layer5_out_num_data_valid;
input  [8:0] layer5_out_fifo_cap;
input   layer5_out_full_n;
output   layer5_out_write;
output   start_out;
output   start_write;

reg ap_idle;
reg layer4_out_read;
reg layer5_out_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln41_fu_129_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    layer4_out_blk_n;
wire    ap_block_pp0_stage0;
reg    layer5_out_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln51_fu_240_p2;
reg   [0:0] icmp_ln51_reg_610;
wire   [10:0] trunc_ln52_fu_246_p1;
reg   [10:0] trunc_ln52_reg_615;
wire   [0:0] icmp_ln51_20_fu_250_p2;
reg   [0:0] icmp_ln51_20_reg_620;
reg   [10:0] tmp_s_reg_625;
wire   [0:0] icmp_ln51_21_fu_266_p2;
reg   [0:0] icmp_ln51_21_reg_630;
reg   [10:0] tmp_19_reg_635;
wire   [0:0] icmp_ln51_22_fu_282_p2;
reg   [0:0] icmp_ln51_22_reg_640;
reg   [10:0] tmp_20_reg_645;
wire   [0:0] icmp_ln51_23_fu_298_p2;
reg   [0:0] icmp_ln51_23_reg_650;
reg   [10:0] tmp_21_reg_655;
wire   [0:0] icmp_ln51_24_fu_314_p2;
reg   [0:0] icmp_ln51_24_reg_660;
reg   [10:0] tmp_22_reg_665;
wire   [0:0] icmp_ln51_25_fu_330_p2;
reg   [0:0] icmp_ln51_25_reg_670;
reg   [10:0] tmp_23_reg_675;
wire   [0:0] icmp_ln51_26_fu_346_p2;
reg   [0:0] icmp_ln51_26_reg_680;
reg   [10:0] tmp_24_reg_685;
wire   [0:0] icmp_ln51_27_fu_362_p2;
reg   [0:0] icmp_ln51_27_reg_690;
reg   [10:0] tmp_25_reg_695;
wire   [0:0] icmp_ln51_28_fu_378_p2;
reg   [0:0] icmp_ln51_28_reg_700;
reg   [10:0] tmp_26_reg_705;
reg   [7:0] i_fu_104;
wire   [7:0] i_4_fu_135_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_i_3;
reg    ap_block_pp0_stage0_01001;
wire   [11:0] trunc_ln44_fu_146_p1;
wire   [11:0] trunc_ln44_s_fu_150_p4;
wire   [11:0] trunc_ln44_19_fu_160_p4;
wire   [11:0] trunc_ln44_20_fu_170_p4;
wire   [11:0] trunc_ln44_21_fu_180_p4;
wire   [11:0] trunc_ln44_22_fu_190_p4;
wire   [11:0] trunc_ln44_23_fu_200_p4;
wire   [11:0] trunc_ln44_24_fu_210_p4;
wire   [11:0] trunc_ln44_25_fu_220_p4;
wire   [11:0] trunc_ln44_26_fu_230_p4;
wire   [14:0] out_data_fu_394_p3;
wire   [14:0] out_data_8_fu_401_p3;
wire   [14:0] out_data_9_fu_412_p3;
wire   [14:0] out_data_10_fu_419_p3;
wire   [14:0] out_data_11_fu_430_p3;
wire   [14:0] out_data_12_fu_437_p3;
wire   [14:0] out_data_13_fu_448_p3;
wire   [14:0] out_data_14_fu_455_p3;
wire   [14:0] shl_ln_fu_466_p3;
wire   [14:0] select_ln51_fu_473_p3;
wire   [14:0] shl_ln52_s_fu_484_p3;
wire   [14:0] select_ln51_16_fu_491_p3;
wire   [14:0] shl_ln52_15_fu_502_p3;
wire   [14:0] select_ln51_17_fu_509_p3;
wire   [14:0] shl_ln52_16_fu_520_p3;
wire   [14:0] select_ln51_18_fu_527_p3;
wire   [14:0] shl_ln52_17_fu_538_p3;
wire   [14:0] select_ln51_19_fu_545_p3;
wire   [14:0] shl_ln52_18_fu_556_p3;
wire   [14:0] select_ln51_20_fu_563_p3;
wire   [15:0] zext_ln51_18_fu_552_p1;
wire   [15:0] zext_ln51_17_fu_534_p1;
wire   [15:0] zext_ln51_16_fu_516_p1;
wire   [15:0] zext_ln51_15_fu_498_p1;
wire   [15:0] zext_ln51_fu_480_p1;
wire   [15:0] zext_ln45_6_fu_462_p1;
wire   [15:0] zext_ln45_5_fu_444_p1;
wire   [15:0] zext_ln45_4_fu_426_p1;
wire   [15:0] zext_ln45_fu_408_p1;
wire   [158:0] or_ln57_s_fu_570_p11;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_153;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 i_fu_104 = 8'd0;
end

hls_cnn_2d_100s_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_153)) begin
        if ((icmp_ln41_fu_129_p2 == 1'd0)) begin
            i_fu_104 <= i_4_fu_135_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_104 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln51_20_reg_620 <= icmp_ln51_20_fu_250_p2;
        icmp_ln51_21_reg_630 <= icmp_ln51_21_fu_266_p2;
        icmp_ln51_22_reg_640 <= icmp_ln51_22_fu_282_p2;
        icmp_ln51_23_reg_650 <= icmp_ln51_23_fu_298_p2;
        icmp_ln51_24_reg_660 <= icmp_ln51_24_fu_314_p2;
        icmp_ln51_25_reg_670 <= icmp_ln51_25_fu_330_p2;
        icmp_ln51_26_reg_680 <= icmp_ln51_26_fu_346_p2;
        icmp_ln51_27_reg_690 <= icmp_ln51_27_fu_362_p2;
        icmp_ln51_28_reg_700 <= icmp_ln51_28_fu_378_p2;
        icmp_ln51_reg_610 <= icmp_ln51_fu_240_p2;
        tmp_19_reg_635 <= {{layer4_out_dout[34:24]}};
        tmp_20_reg_645 <= {{layer4_out_dout[46:36]}};
        tmp_21_reg_655 <= {{layer4_out_dout[58:48]}};
        tmp_22_reg_665 <= {{layer4_out_dout[70:60]}};
        tmp_23_reg_675 <= {{layer4_out_dout[82:72]}};
        tmp_24_reg_685 <= {{layer4_out_dout[94:84]}};
        tmp_25_reg_695 <= {{layer4_out_dout[106:96]}};
        tmp_26_reg_705 <= {{layer4_out_dout[118:108]}};
        tmp_s_reg_625 <= {{layer4_out_dout[22:12]}};
        trunc_ln52_reg_615 <= trunc_ln52_fu_246_p1;
    end
end

always @ (*) begin
    if (((icmp_ln41_fu_129_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_3 = 8'd0;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_104;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer4_out_blk_n = layer4_out_empty_n;
    end else begin
        layer4_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer4_out_read = 1'b1;
    end else begin
        layer4_out_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        layer5_out_blk_n = layer5_out_full_n;
    end else begin
        layer5_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        layer5_out_write = 1'b1;
    end else begin
        layer5_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (layer4_out_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (layer5_out_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_153 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign i_4_fu_135_p2 = (ap_sig_allocacmp_i_3 + 8'd1);

assign icmp_ln41_fu_129_p2 = ((ap_sig_allocacmp_i_3 == 8'd238) ? 1'b1 : 1'b0);

assign icmp_ln51_20_fu_250_p2 = (($signed(trunc_ln44_s_fu_150_p4) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_21_fu_266_p2 = (($signed(trunc_ln44_19_fu_160_p4) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_22_fu_282_p2 = (($signed(trunc_ln44_20_fu_170_p4) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_23_fu_298_p2 = (($signed(trunc_ln44_21_fu_180_p4) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_24_fu_314_p2 = (($signed(trunc_ln44_22_fu_190_p4) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_25_fu_330_p2 = (($signed(trunc_ln44_23_fu_200_p4) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_26_fu_346_p2 = (($signed(trunc_ln44_24_fu_210_p4) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_27_fu_362_p2 = (($signed(trunc_ln44_25_fu_220_p4) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_28_fu_378_p2 = (($signed(trunc_ln44_26_fu_230_p4) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_240_p2 = (($signed(trunc_ln44_fu_146_p1) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign layer5_out_din = or_ln57_s_fu_570_p11;

assign or_ln57_s_fu_570_p11 = {{{{{{{{{{select_ln51_20_fu_563_p3}, {zext_ln51_18_fu_552_p1}}, {zext_ln51_17_fu_534_p1}}, {zext_ln51_16_fu_516_p1}}, {zext_ln51_15_fu_498_p1}}, {zext_ln51_fu_480_p1}}, {zext_ln45_6_fu_462_p1}}, {zext_ln45_5_fu_444_p1}}, {zext_ln45_4_fu_426_p1}}, {zext_ln45_fu_408_p1}};

assign out_data_10_fu_419_p3 = ((icmp_ln51_20_reg_620[0:0] == 1'b1) ? out_data_9_fu_412_p3 : 15'd0);

assign out_data_11_fu_430_p3 = {{tmp_19_reg_635}, {4'd0}};

assign out_data_12_fu_437_p3 = ((icmp_ln51_21_reg_630[0:0] == 1'b1) ? out_data_11_fu_430_p3 : 15'd0);

assign out_data_13_fu_448_p3 = {{tmp_20_reg_645}, {4'd0}};

assign out_data_14_fu_455_p3 = ((icmp_ln51_22_reg_640[0:0] == 1'b1) ? out_data_13_fu_448_p3 : 15'd0);

assign out_data_8_fu_401_p3 = ((icmp_ln51_reg_610[0:0] == 1'b1) ? out_data_fu_394_p3 : 15'd0);

assign out_data_9_fu_412_p3 = {{tmp_s_reg_625}, {4'd0}};

assign out_data_fu_394_p3 = {{trunc_ln52_reg_615}, {4'd0}};

assign select_ln51_16_fu_491_p3 = ((icmp_ln51_24_reg_660[0:0] == 1'b1) ? shl_ln52_s_fu_484_p3 : 15'd0);

assign select_ln51_17_fu_509_p3 = ((icmp_ln51_25_reg_670[0:0] == 1'b1) ? shl_ln52_15_fu_502_p3 : 15'd0);

assign select_ln51_18_fu_527_p3 = ((icmp_ln51_26_reg_680[0:0] == 1'b1) ? shl_ln52_16_fu_520_p3 : 15'd0);

assign select_ln51_19_fu_545_p3 = ((icmp_ln51_27_reg_690[0:0] == 1'b1) ? shl_ln52_17_fu_538_p3 : 15'd0);

assign select_ln51_20_fu_563_p3 = ((icmp_ln51_28_reg_700[0:0] == 1'b1) ? shl_ln52_18_fu_556_p3 : 15'd0);

assign select_ln51_fu_473_p3 = ((icmp_ln51_23_reg_650[0:0] == 1'b1) ? shl_ln_fu_466_p3 : 15'd0);

assign shl_ln52_15_fu_502_p3 = {{tmp_23_reg_675}, {4'd0}};

assign shl_ln52_16_fu_520_p3 = {{tmp_24_reg_685}, {4'd0}};

assign shl_ln52_17_fu_538_p3 = {{tmp_25_reg_695}, {4'd0}};

assign shl_ln52_18_fu_556_p3 = {{tmp_26_reg_705}, {4'd0}};

assign shl_ln52_s_fu_484_p3 = {{tmp_22_reg_665}, {4'd0}};

assign shl_ln_fu_466_p3 = {{tmp_21_reg_655}, {4'd0}};

assign start_out = real_start;

assign trunc_ln44_19_fu_160_p4 = {{layer4_out_dout[35:24]}};

assign trunc_ln44_20_fu_170_p4 = {{layer4_out_dout[47:36]}};

assign trunc_ln44_21_fu_180_p4 = {{layer4_out_dout[59:48]}};

assign trunc_ln44_22_fu_190_p4 = {{layer4_out_dout[71:60]}};

assign trunc_ln44_23_fu_200_p4 = {{layer4_out_dout[83:72]}};

assign trunc_ln44_24_fu_210_p4 = {{layer4_out_dout[95:84]}};

assign trunc_ln44_25_fu_220_p4 = {{layer4_out_dout[107:96]}};

assign trunc_ln44_26_fu_230_p4 = {{layer4_out_dout[119:108]}};

assign trunc_ln44_fu_146_p1 = layer4_out_dout[11:0];

assign trunc_ln44_s_fu_150_p4 = {{layer4_out_dout[23:12]}};

assign trunc_ln52_fu_246_p1 = layer4_out_dout[10:0];

assign zext_ln45_4_fu_426_p1 = out_data_10_fu_419_p3;

assign zext_ln45_5_fu_444_p1 = out_data_12_fu_437_p3;

assign zext_ln45_6_fu_462_p1 = out_data_14_fu_455_p3;

assign zext_ln45_fu_408_p1 = out_data_8_fu_401_p3;

assign zext_ln51_15_fu_498_p1 = select_ln51_16_fu_491_p3;

assign zext_ln51_16_fu_516_p1 = select_ln51_17_fu_509_p3;

assign zext_ln51_17_fu_534_p1 = select_ln51_18_fu_527_p3;

assign zext_ln51_18_fu_552_p1 = select_ln51_19_fu_545_p3;

assign zext_ln51_fu_480_p1 = select_ln51_fu_473_p3;

endmodule //hls_cnn_2d_100s_relu_array_ap_fixed_10u_array_ap_fixed_16_2_5_3_0_10u_relu_config5_s
