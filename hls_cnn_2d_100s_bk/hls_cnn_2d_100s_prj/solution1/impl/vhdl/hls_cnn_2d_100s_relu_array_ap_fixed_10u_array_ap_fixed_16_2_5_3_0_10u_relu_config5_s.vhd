-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_cnn_2d_100s_relu_array_ap_fixed_10u_array_ap_fixed_16_2_5_3_0_10u_relu_config5_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer4_out_dout : IN STD_LOGIC_VECTOR (119 downto 0);
    layer4_out_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    layer4_out_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    layer4_out_empty_n : IN STD_LOGIC;
    layer4_out_read : OUT STD_LOGIC;
    layer5_out_din : OUT STD_LOGIC_VECTOR (159 downto 0);
    layer5_out_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    layer5_out_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    layer5_out_full_n : IN STD_LOGIC;
    layer5_out_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC );
end;


architecture behav of hls_cnn_2d_100s_relu_array_ap_fixed_10u_array_ap_fixed_16_2_5_3_0_10u_relu_config5_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_EE : STD_LOGIC_VECTOR (7 downto 0) := "11101110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln41_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal layer4_out_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal layer5_out_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln51_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_610 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_fu_246_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln52_reg_615 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_20_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_20_reg_620 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_625 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_21_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_21_reg_630 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_635 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_22_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_22_reg_640 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_reg_645 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_23_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_23_reg_650 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_655 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_24_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_24_reg_660 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_665 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_25_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_25_reg_670 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_reg_675 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_26_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_26_reg_680 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_reg_685 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_27_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_27_reg_690 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_reg_695 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_28_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_28_reg_700 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_705 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_fu_104 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal i_4_fu_135_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln44_fu_146_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln44_s_fu_150_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln44_19_fu_160_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln44_20_fu_170_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln44_21_fu_180_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln44_22_fu_190_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln44_23_fu_200_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln44_24_fu_210_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln44_25_fu_220_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln44_26_fu_230_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal out_data_fu_394_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_8_fu_401_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_9_fu_412_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_10_fu_419_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_11_fu_430_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_12_fu_437_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_13_fu_448_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_14_fu_455_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln_fu_466_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_fu_473_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln52_s_fu_484_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_16_fu_491_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln52_15_fu_502_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_17_fu_509_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln52_16_fu_520_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_18_fu_527_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln52_17_fu_538_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_19_fu_545_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln52_18_fu_556_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_20_fu_563_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln51_18_fu_552_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_17_fu_534_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_16_fu_516_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_15_fu_498_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_fu_480_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_6_fu_462_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_5_fu_444_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_4_fu_426_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_fu_408_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln57_s_fu_570_p11 : STD_LOGIC_VECTOR (158 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_153 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component hls_cnn_2d_100s_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component hls_cnn_2d_100s_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_153)) then
                if ((icmp_ln41_fu_129_p2 = ap_const_lv1_0)) then 
                    i_fu_104 <= i_4_fu_135_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_104 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln51_20_reg_620 <= icmp_ln51_20_fu_250_p2;
                icmp_ln51_21_reg_630 <= icmp_ln51_21_fu_266_p2;
                icmp_ln51_22_reg_640 <= icmp_ln51_22_fu_282_p2;
                icmp_ln51_23_reg_650 <= icmp_ln51_23_fu_298_p2;
                icmp_ln51_24_reg_660 <= icmp_ln51_24_fu_314_p2;
                icmp_ln51_25_reg_670 <= icmp_ln51_25_fu_330_p2;
                icmp_ln51_26_reg_680 <= icmp_ln51_26_fu_346_p2;
                icmp_ln51_27_reg_690 <= icmp_ln51_27_fu_362_p2;
                icmp_ln51_28_reg_700 <= icmp_ln51_28_fu_378_p2;
                icmp_ln51_reg_610 <= icmp_ln51_fu_240_p2;
                tmp_19_reg_635 <= layer4_out_dout(34 downto 24);
                tmp_20_reg_645 <= layer4_out_dout(46 downto 36);
                tmp_21_reg_655 <= layer4_out_dout(58 downto 48);
                tmp_22_reg_665 <= layer4_out_dout(70 downto 60);
                tmp_23_reg_675 <= layer4_out_dout(82 downto 72);
                tmp_24_reg_685 <= layer4_out_dout(94 downto 84);
                tmp_25_reg_695 <= layer4_out_dout(106 downto 96);
                tmp_26_reg_705 <= layer4_out_dout(118 downto 108);
                tmp_s_reg_625 <= layer4_out_dout(22 downto 12);
                trunc_ln52_reg_615 <= trunc_ln52_fu_246_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(layer4_out_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (layer4_out_empty_n = ap_const_logic_0);
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(layer5_out_full_n)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (layer5_out_full_n = ap_const_logic_0);
    end process;


    ap_condition_153_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_153 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln41_fu_129_p2, ap_start_int)
    begin
        if (((icmp_ln41_fu_129_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_104, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_3 <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_i_3 <= i_fu_104;
        end if; 
    end process;

    i_4_fu_135_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_3) + unsigned(ap_const_lv8_1));
    icmp_ln41_fu_129_p2 <= "1" when (ap_sig_allocacmp_i_3 = ap_const_lv8_EE) else "0";
    icmp_ln51_20_fu_250_p2 <= "1" when (signed(trunc_ln44_s_fu_150_p4) > signed(ap_const_lv12_0)) else "0";
    icmp_ln51_21_fu_266_p2 <= "1" when (signed(trunc_ln44_19_fu_160_p4) > signed(ap_const_lv12_0)) else "0";
    icmp_ln51_22_fu_282_p2 <= "1" when (signed(trunc_ln44_20_fu_170_p4) > signed(ap_const_lv12_0)) else "0";
    icmp_ln51_23_fu_298_p2 <= "1" when (signed(trunc_ln44_21_fu_180_p4) > signed(ap_const_lv12_0)) else "0";
    icmp_ln51_24_fu_314_p2 <= "1" when (signed(trunc_ln44_22_fu_190_p4) > signed(ap_const_lv12_0)) else "0";
    icmp_ln51_25_fu_330_p2 <= "1" when (signed(trunc_ln44_23_fu_200_p4) > signed(ap_const_lv12_0)) else "0";
    icmp_ln51_26_fu_346_p2 <= "1" when (signed(trunc_ln44_24_fu_210_p4) > signed(ap_const_lv12_0)) else "0";
    icmp_ln51_27_fu_362_p2 <= "1" when (signed(trunc_ln44_25_fu_220_p4) > signed(ap_const_lv12_0)) else "0";
    icmp_ln51_28_fu_378_p2 <= "1" when (signed(trunc_ln44_26_fu_230_p4) > signed(ap_const_lv12_0)) else "0";
    icmp_ln51_fu_240_p2 <= "1" when (signed(trunc_ln44_fu_146_p1) > signed(ap_const_lv12_0)) else "0";

    layer4_out_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, layer4_out_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer4_out_blk_n <= layer4_out_empty_n;
        else 
            layer4_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer4_out_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer4_out_read <= ap_const_logic_1;
        else 
            layer4_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer5_out_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, layer5_out_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer5_out_blk_n <= layer5_out_full_n;
        else 
            layer5_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer5_out_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln57_s_fu_570_p11),160));

    layer5_out_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer5_out_write <= ap_const_logic_1;
        else 
            layer5_out_write <= ap_const_logic_0;
        end if; 
    end process;

    or_ln57_s_fu_570_p11 <= (((((((((select_ln51_20_fu_563_p3 & zext_ln51_18_fu_552_p1) & zext_ln51_17_fu_534_p1) & zext_ln51_16_fu_516_p1) & zext_ln51_15_fu_498_p1) & zext_ln51_fu_480_p1) & zext_ln45_6_fu_462_p1) & zext_ln45_5_fu_444_p1) & zext_ln45_4_fu_426_p1) & zext_ln45_fu_408_p1);
    out_data_10_fu_419_p3 <= 
        out_data_9_fu_412_p3 when (icmp_ln51_20_reg_620(0) = '1') else 
        ap_const_lv15_0;
    out_data_11_fu_430_p3 <= (tmp_19_reg_635 & ap_const_lv4_0);
    out_data_12_fu_437_p3 <= 
        out_data_11_fu_430_p3 when (icmp_ln51_21_reg_630(0) = '1') else 
        ap_const_lv15_0;
    out_data_13_fu_448_p3 <= (tmp_20_reg_645 & ap_const_lv4_0);
    out_data_14_fu_455_p3 <= 
        out_data_13_fu_448_p3 when (icmp_ln51_22_reg_640(0) = '1') else 
        ap_const_lv15_0;
    out_data_8_fu_401_p3 <= 
        out_data_fu_394_p3 when (icmp_ln51_reg_610(0) = '1') else 
        ap_const_lv15_0;
    out_data_9_fu_412_p3 <= (tmp_s_reg_625 & ap_const_lv4_0);
    out_data_fu_394_p3 <= (trunc_ln52_reg_615 & ap_const_lv4_0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln51_16_fu_491_p3 <= 
        shl_ln52_s_fu_484_p3 when (icmp_ln51_24_reg_660(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_17_fu_509_p3 <= 
        shl_ln52_15_fu_502_p3 when (icmp_ln51_25_reg_670(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_18_fu_527_p3 <= 
        shl_ln52_16_fu_520_p3 when (icmp_ln51_26_reg_680(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_19_fu_545_p3 <= 
        shl_ln52_17_fu_538_p3 when (icmp_ln51_27_reg_690(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_20_fu_563_p3 <= 
        shl_ln52_18_fu_556_p3 when (icmp_ln51_28_reg_700(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_fu_473_p3 <= 
        shl_ln_fu_466_p3 when (icmp_ln51_23_reg_650(0) = '1') else 
        ap_const_lv15_0;
    shl_ln52_15_fu_502_p3 <= (tmp_23_reg_675 & ap_const_lv4_0);
    shl_ln52_16_fu_520_p3 <= (tmp_24_reg_685 & ap_const_lv4_0);
    shl_ln52_17_fu_538_p3 <= (tmp_25_reg_695 & ap_const_lv4_0);
    shl_ln52_18_fu_556_p3 <= (tmp_26_reg_705 & ap_const_lv4_0);
    shl_ln52_s_fu_484_p3 <= (tmp_22_reg_665 & ap_const_lv4_0);
    shl_ln_fu_466_p3 <= (tmp_21_reg_655 & ap_const_lv4_0);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln44_19_fu_160_p4 <= layer4_out_dout(35 downto 24);
    trunc_ln44_20_fu_170_p4 <= layer4_out_dout(47 downto 36);
    trunc_ln44_21_fu_180_p4 <= layer4_out_dout(59 downto 48);
    trunc_ln44_22_fu_190_p4 <= layer4_out_dout(71 downto 60);
    trunc_ln44_23_fu_200_p4 <= layer4_out_dout(83 downto 72);
    trunc_ln44_24_fu_210_p4 <= layer4_out_dout(95 downto 84);
    trunc_ln44_25_fu_220_p4 <= layer4_out_dout(107 downto 96);
    trunc_ln44_26_fu_230_p4 <= layer4_out_dout(119 downto 108);
    trunc_ln44_fu_146_p1 <= layer4_out_dout(12 - 1 downto 0);
    trunc_ln44_s_fu_150_p4 <= layer4_out_dout(23 downto 12);
    trunc_ln52_fu_246_p1 <= layer4_out_dout(11 - 1 downto 0);
    zext_ln45_4_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_10_fu_419_p3),16));
    zext_ln45_5_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_12_fu_437_p3),16));
    zext_ln45_6_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_14_fu_455_p3),16));
    zext_ln45_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_8_fu_401_p3),16));
    zext_ln51_15_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_16_fu_491_p3),16));
    zext_ln51_16_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_17_fu_509_p3),16));
    zext_ln51_17_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_18_fu_527_p3),16));
    zext_ln51_18_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_19_fu_545_p3),16));
    zext_ln51_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_fu_473_p3),16));
end behav;
