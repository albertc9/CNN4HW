// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module hls_cnn_2d_100s_relu_array_ap_fixed_20u_array_ap_fixed_16_2_5_3_0_20u_relu_config3_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        layer2_out_dout,
        layer2_out_num_data_valid,
        layer2_out_fifo_cap,
        layer2_out_empty_n,
        layer2_out_read,
        layer3_out_din,
        layer3_out_num_data_valid,
        layer3_out_fifo_cap,
        layer3_out_full_n,
        layer3_out_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [239:0] layer2_out_dout;
input  [8:0] layer2_out_num_data_valid;
input  [8:0] layer2_out_fifo_cap;
input   layer2_out_empty_n;
output   layer2_out_read;
output  [319:0] layer3_out_din;
input  [8:0] layer3_out_num_data_valid;
input  [8:0] layer3_out_fifo_cap;
input   layer3_out_full_n;
output   layer3_out_write;
output   start_out;
output   start_write;

reg ap_idle;
reg layer2_out_read;
reg layer3_out_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln41_fu_189_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    layer2_out_blk_n;
wire    ap_block_pp0_stage0;
reg    layer3_out_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln51_fu_400_p2;
reg   [0:0] icmp_ln51_reg_1130;
wire   [10:0] trunc_ln52_fu_406_p1;
reg   [10:0] trunc_ln52_reg_1135;
wire   [0:0] icmp_ln51_1_fu_410_p2;
reg   [0:0] icmp_ln51_1_reg_1140;
reg   [10:0] tmp_1_reg_1145;
wire   [0:0] icmp_ln51_2_fu_426_p2;
reg   [0:0] icmp_ln51_2_reg_1150;
reg   [10:0] tmp_2_reg_1155;
wire   [0:0] icmp_ln51_3_fu_442_p2;
reg   [0:0] icmp_ln51_3_reg_1160;
reg   [10:0] tmp_3_reg_1165;
wire   [0:0] icmp_ln51_4_fu_458_p2;
reg   [0:0] icmp_ln51_4_reg_1170;
reg   [10:0] tmp_4_reg_1175;
wire   [0:0] icmp_ln51_5_fu_474_p2;
reg   [0:0] icmp_ln51_5_reg_1180;
reg   [10:0] tmp_5_reg_1185;
wire   [0:0] icmp_ln51_6_fu_490_p2;
reg   [0:0] icmp_ln51_6_reg_1190;
reg   [10:0] tmp_6_reg_1195;
wire   [0:0] icmp_ln51_7_fu_506_p2;
reg   [0:0] icmp_ln51_7_reg_1200;
reg   [10:0] tmp_7_reg_1205;
wire   [0:0] icmp_ln51_8_fu_522_p2;
reg   [0:0] icmp_ln51_8_reg_1210;
reg   [10:0] tmp_8_reg_1215;
wire   [0:0] icmp_ln51_9_fu_538_p2;
reg   [0:0] icmp_ln51_9_reg_1220;
reg   [10:0] tmp_9_reg_1225;
wire   [0:0] icmp_ln51_10_fu_554_p2;
reg   [0:0] icmp_ln51_10_reg_1230;
reg   [10:0] tmp_s_reg_1235;
wire   [0:0] icmp_ln51_11_fu_570_p2;
reg   [0:0] icmp_ln51_11_reg_1240;
reg   [10:0] tmp_10_reg_1245;
wire   [0:0] icmp_ln51_12_fu_586_p2;
reg   [0:0] icmp_ln51_12_reg_1250;
reg   [10:0] tmp_11_reg_1255;
wire   [0:0] icmp_ln51_13_fu_602_p2;
reg   [0:0] icmp_ln51_13_reg_1260;
reg   [10:0] tmp_12_reg_1265;
wire   [0:0] icmp_ln51_14_fu_618_p2;
reg   [0:0] icmp_ln51_14_reg_1270;
reg   [10:0] tmp_13_reg_1275;
wire   [0:0] icmp_ln51_15_fu_634_p2;
reg   [0:0] icmp_ln51_15_reg_1280;
reg   [10:0] tmp_14_reg_1285;
wire   [0:0] icmp_ln51_16_fu_650_p2;
reg   [0:0] icmp_ln51_16_reg_1290;
reg   [10:0] tmp_15_reg_1295;
wire   [0:0] icmp_ln51_17_fu_666_p2;
reg   [0:0] icmp_ln51_17_reg_1300;
reg   [10:0] tmp_16_reg_1305;
wire   [0:0] icmp_ln51_18_fu_682_p2;
reg   [0:0] icmp_ln51_18_reg_1310;
reg   [10:0] tmp_17_reg_1315;
wire   [0:0] icmp_ln51_19_fu_698_p2;
reg   [0:0] icmp_ln51_19_reg_1320;
reg   [10:0] tmp_18_reg_1325;
reg   [7:0] i_fu_164;
wire   [7:0] i_2_fu_195_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_i_1;
reg    ap_block_pp0_stage0_01001;
wire   [11:0] trunc_ln44_fu_206_p1;
wire   [11:0] trunc_ln44_1_fu_210_p4;
wire   [11:0] trunc_ln44_2_fu_220_p4;
wire   [11:0] trunc_ln44_3_fu_230_p4;
wire   [11:0] trunc_ln44_4_fu_240_p4;
wire   [11:0] trunc_ln44_5_fu_250_p4;
wire   [11:0] trunc_ln44_6_fu_260_p4;
wire   [11:0] trunc_ln44_7_fu_270_p4;
wire   [11:0] trunc_ln44_8_fu_280_p4;
wire   [11:0] trunc_ln44_9_fu_290_p4;
wire   [11:0] trunc_ln44_s_fu_300_p4;
wire   [11:0] trunc_ln44_10_fu_310_p4;
wire   [11:0] trunc_ln44_11_fu_320_p4;
wire   [11:0] trunc_ln44_12_fu_330_p4;
wire   [11:0] trunc_ln44_13_fu_340_p4;
wire   [11:0] trunc_ln44_14_fu_350_p4;
wire   [11:0] trunc_ln44_15_fu_360_p4;
wire   [11:0] trunc_ln44_16_fu_370_p4;
wire   [11:0] trunc_ln44_17_fu_380_p4;
wire   [11:0] trunc_ln44_18_fu_390_p4;
wire   [14:0] out_data_fu_714_p3;
wire   [14:0] out_data_1_fu_721_p3;
wire   [14:0] out_data_2_fu_732_p3;
wire   [14:0] out_data_3_fu_739_p3;
wire   [14:0] out_data_4_fu_750_p3;
wire   [14:0] out_data_5_fu_757_p3;
wire   [14:0] out_data_6_fu_768_p3;
wire   [14:0] out_data_7_fu_775_p3;
wire   [14:0] shl_ln_fu_786_p3;
wire   [14:0] select_ln51_fu_793_p3;
wire   [14:0] shl_ln52_1_fu_804_p3;
wire   [14:0] select_ln51_1_fu_811_p3;
wire   [14:0] shl_ln52_2_fu_822_p3;
wire   [14:0] select_ln51_2_fu_829_p3;
wire   [14:0] shl_ln52_3_fu_840_p3;
wire   [14:0] select_ln51_3_fu_847_p3;
wire   [14:0] shl_ln52_4_fu_858_p3;
wire   [14:0] select_ln51_4_fu_865_p3;
wire   [14:0] shl_ln52_5_fu_876_p3;
wire   [14:0] select_ln51_5_fu_883_p3;
wire   [14:0] shl_ln52_6_fu_894_p3;
wire   [14:0] select_ln51_6_fu_901_p3;
wire   [14:0] shl_ln52_7_fu_912_p3;
wire   [14:0] select_ln51_7_fu_919_p3;
wire   [14:0] shl_ln52_8_fu_930_p3;
wire   [14:0] select_ln51_8_fu_937_p3;
wire   [14:0] shl_ln52_9_fu_948_p3;
wire   [14:0] select_ln51_9_fu_955_p3;
wire   [14:0] shl_ln52_s_fu_966_p3;
wire   [14:0] select_ln51_10_fu_973_p3;
wire   [14:0] shl_ln52_10_fu_984_p3;
wire   [14:0] select_ln51_11_fu_991_p3;
wire   [14:0] shl_ln52_11_fu_1002_p3;
wire   [14:0] select_ln51_12_fu_1009_p3;
wire   [14:0] shl_ln52_12_fu_1020_p3;
wire   [14:0] select_ln51_13_fu_1027_p3;
wire   [14:0] shl_ln52_13_fu_1038_p3;
wire   [14:0] select_ln51_14_fu_1045_p3;
wire   [14:0] shl_ln52_14_fu_1056_p3;
wire   [14:0] select_ln51_15_fu_1063_p3;
wire   [15:0] zext_ln51_14_fu_1052_p1;
wire   [15:0] zext_ln51_13_fu_1034_p1;
wire   [15:0] zext_ln51_12_fu_1016_p1;
wire   [15:0] zext_ln51_11_fu_998_p1;
wire   [15:0] zext_ln51_10_fu_980_p1;
wire   [15:0] zext_ln51_9_fu_962_p1;
wire   [15:0] zext_ln51_8_fu_944_p1;
wire   [15:0] zext_ln51_7_fu_926_p1;
wire   [15:0] zext_ln51_6_fu_908_p1;
wire   [15:0] zext_ln51_5_fu_890_p1;
wire   [15:0] zext_ln51_4_fu_872_p1;
wire   [15:0] zext_ln51_3_fu_854_p1;
wire   [15:0] zext_ln51_2_fu_836_p1;
wire   [15:0] zext_ln51_1_fu_818_p1;
wire   [15:0] zext_ln51_fu_800_p1;
wire   [15:0] zext_ln45_3_fu_782_p1;
wire   [15:0] zext_ln45_2_fu_764_p1;
wire   [15:0] zext_ln45_1_fu_746_p1;
wire   [15:0] zext_ln45_fu_728_p1;
wire   [318:0] or_ln57_s_fu_1070_p21;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_193;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 i_fu_164 = 8'd0;
end

hls_cnn_2d_100s_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_193)) begin
        if ((icmp_ln41_fu_189_p2 == 1'd0)) begin
            i_fu_164 <= i_2_fu_195_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_164 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln51_10_reg_1230 <= icmp_ln51_10_fu_554_p2;
        icmp_ln51_11_reg_1240 <= icmp_ln51_11_fu_570_p2;
        icmp_ln51_12_reg_1250 <= icmp_ln51_12_fu_586_p2;
        icmp_ln51_13_reg_1260 <= icmp_ln51_13_fu_602_p2;
        icmp_ln51_14_reg_1270 <= icmp_ln51_14_fu_618_p2;
        icmp_ln51_15_reg_1280 <= icmp_ln51_15_fu_634_p2;
        icmp_ln51_16_reg_1290 <= icmp_ln51_16_fu_650_p2;
        icmp_ln51_17_reg_1300 <= icmp_ln51_17_fu_666_p2;
        icmp_ln51_18_reg_1310 <= icmp_ln51_18_fu_682_p2;
        icmp_ln51_19_reg_1320 <= icmp_ln51_19_fu_698_p2;
        icmp_ln51_1_reg_1140 <= icmp_ln51_1_fu_410_p2;
        icmp_ln51_2_reg_1150 <= icmp_ln51_2_fu_426_p2;
        icmp_ln51_3_reg_1160 <= icmp_ln51_3_fu_442_p2;
        icmp_ln51_4_reg_1170 <= icmp_ln51_4_fu_458_p2;
        icmp_ln51_5_reg_1180 <= icmp_ln51_5_fu_474_p2;
        icmp_ln51_6_reg_1190 <= icmp_ln51_6_fu_490_p2;
        icmp_ln51_7_reg_1200 <= icmp_ln51_7_fu_506_p2;
        icmp_ln51_8_reg_1210 <= icmp_ln51_8_fu_522_p2;
        icmp_ln51_9_reg_1220 <= icmp_ln51_9_fu_538_p2;
        icmp_ln51_reg_1130 <= icmp_ln51_fu_400_p2;
        tmp_10_reg_1245 <= {{layer2_out_dout[142:132]}};
        tmp_11_reg_1255 <= {{layer2_out_dout[154:144]}};
        tmp_12_reg_1265 <= {{layer2_out_dout[166:156]}};
        tmp_13_reg_1275 <= {{layer2_out_dout[178:168]}};
        tmp_14_reg_1285 <= {{layer2_out_dout[190:180]}};
        tmp_15_reg_1295 <= {{layer2_out_dout[202:192]}};
        tmp_16_reg_1305 <= {{layer2_out_dout[214:204]}};
        tmp_17_reg_1315 <= {{layer2_out_dout[226:216]}};
        tmp_18_reg_1325 <= {{layer2_out_dout[238:228]}};
        tmp_1_reg_1145 <= {{layer2_out_dout[22:12]}};
        tmp_2_reg_1155 <= {{layer2_out_dout[34:24]}};
        tmp_3_reg_1165 <= {{layer2_out_dout[46:36]}};
        tmp_4_reg_1175 <= {{layer2_out_dout[58:48]}};
        tmp_5_reg_1185 <= {{layer2_out_dout[70:60]}};
        tmp_6_reg_1195 <= {{layer2_out_dout[82:72]}};
        tmp_7_reg_1205 <= {{layer2_out_dout[94:84]}};
        tmp_8_reg_1215 <= {{layer2_out_dout[106:96]}};
        tmp_9_reg_1225 <= {{layer2_out_dout[118:108]}};
        tmp_s_reg_1235 <= {{layer2_out_dout[130:120]}};
        trunc_ln52_reg_1135 <= trunc_ln52_fu_406_p1;
    end
end

always @ (*) begin
    if (((icmp_ln41_fu_189_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 8'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_164;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer2_out_blk_n = layer2_out_empty_n;
    end else begin
        layer2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer2_out_read = 1'b1;
    end else begin
        layer2_out_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        layer3_out_blk_n = layer3_out_full_n;
    end else begin
        layer3_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        layer3_out_write = 1'b1;
    end else begin
        layer3_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (layer2_out_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (layer3_out_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_193 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign i_2_fu_195_p2 = (ap_sig_allocacmp_i_1 + 8'd1);

assign icmp_ln41_fu_189_p2 = ((ap_sig_allocacmp_i_1 == 8'd247) ? 1'b1 : 1'b0);

assign icmp_ln51_10_fu_554_p2 = (($signed(trunc_ln44_s_fu_300_p4) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_11_fu_570_p2 = (($signed(trunc_ln44_10_fu_310_p4) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_12_fu_586_p2 = (($signed(trunc_ln44_11_fu_320_p4) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_13_fu_602_p2 = (($signed(trunc_ln44_12_fu_330_p4) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_14_fu_618_p2 = (($signed(trunc_ln44_13_fu_340_p4) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_15_fu_634_p2 = (($signed(trunc_ln44_14_fu_350_p4) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_16_fu_650_p2 = (($signed(trunc_ln44_15_fu_360_p4) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_17_fu_666_p2 = (($signed(trunc_ln44_16_fu_370_p4) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_18_fu_682_p2 = (($signed(trunc_ln44_17_fu_380_p4) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_19_fu_698_p2 = (($signed(trunc_ln44_18_fu_390_p4) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_1_fu_410_p2 = (($signed(trunc_ln44_1_fu_210_p4) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_2_fu_426_p2 = (($signed(trunc_ln44_2_fu_220_p4) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_3_fu_442_p2 = (($signed(trunc_ln44_3_fu_230_p4) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_4_fu_458_p2 = (($signed(trunc_ln44_4_fu_240_p4) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_5_fu_474_p2 = (($signed(trunc_ln44_5_fu_250_p4) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_6_fu_490_p2 = (($signed(trunc_ln44_6_fu_260_p4) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_7_fu_506_p2 = (($signed(trunc_ln44_7_fu_270_p4) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_8_fu_522_p2 = (($signed(trunc_ln44_8_fu_280_p4) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_9_fu_538_p2 = (($signed(trunc_ln44_9_fu_290_p4) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_400_p2 = (($signed(trunc_ln44_fu_206_p1) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign layer3_out_din = or_ln57_s_fu_1070_p21;

assign or_ln57_s_fu_1070_p21 = {{{{{{{{{{{{{{{{{{{{select_ln51_15_fu_1063_p3}, {zext_ln51_14_fu_1052_p1}}, {zext_ln51_13_fu_1034_p1}}, {zext_ln51_12_fu_1016_p1}}, {zext_ln51_11_fu_998_p1}}, {zext_ln51_10_fu_980_p1}}, {zext_ln51_9_fu_962_p1}}, {zext_ln51_8_fu_944_p1}}, {zext_ln51_7_fu_926_p1}}, {zext_ln51_6_fu_908_p1}}, {zext_ln51_5_fu_890_p1}}, {zext_ln51_4_fu_872_p1}}, {zext_ln51_3_fu_854_p1}}, {zext_ln51_2_fu_836_p1}}, {zext_ln51_1_fu_818_p1}}, {zext_ln51_fu_800_p1}}, {zext_ln45_3_fu_782_p1}}, {zext_ln45_2_fu_764_p1}}, {zext_ln45_1_fu_746_p1}}, {zext_ln45_fu_728_p1}};

assign out_data_1_fu_721_p3 = ((icmp_ln51_reg_1130[0:0] == 1'b1) ? out_data_fu_714_p3 : 15'd0);

assign out_data_2_fu_732_p3 = {{tmp_1_reg_1145}, {4'd0}};

assign out_data_3_fu_739_p3 = ((icmp_ln51_1_reg_1140[0:0] == 1'b1) ? out_data_2_fu_732_p3 : 15'd0);

assign out_data_4_fu_750_p3 = {{tmp_2_reg_1155}, {4'd0}};

assign out_data_5_fu_757_p3 = ((icmp_ln51_2_reg_1150[0:0] == 1'b1) ? out_data_4_fu_750_p3 : 15'd0);

assign out_data_6_fu_768_p3 = {{tmp_3_reg_1165}, {4'd0}};

assign out_data_7_fu_775_p3 = ((icmp_ln51_3_reg_1160[0:0] == 1'b1) ? out_data_6_fu_768_p3 : 15'd0);

assign out_data_fu_714_p3 = {{trunc_ln52_reg_1135}, {4'd0}};

assign select_ln51_10_fu_973_p3 = ((icmp_ln51_14_reg_1270[0:0] == 1'b1) ? shl_ln52_s_fu_966_p3 : 15'd0);

assign select_ln51_11_fu_991_p3 = ((icmp_ln51_15_reg_1280[0:0] == 1'b1) ? shl_ln52_10_fu_984_p3 : 15'd0);

assign select_ln51_12_fu_1009_p3 = ((icmp_ln51_16_reg_1290[0:0] == 1'b1) ? shl_ln52_11_fu_1002_p3 : 15'd0);

assign select_ln51_13_fu_1027_p3 = ((icmp_ln51_17_reg_1300[0:0] == 1'b1) ? shl_ln52_12_fu_1020_p3 : 15'd0);

assign select_ln51_14_fu_1045_p3 = ((icmp_ln51_18_reg_1310[0:0] == 1'b1) ? shl_ln52_13_fu_1038_p3 : 15'd0);

assign select_ln51_15_fu_1063_p3 = ((icmp_ln51_19_reg_1320[0:0] == 1'b1) ? shl_ln52_14_fu_1056_p3 : 15'd0);

assign select_ln51_1_fu_811_p3 = ((icmp_ln51_5_reg_1180[0:0] == 1'b1) ? shl_ln52_1_fu_804_p3 : 15'd0);

assign select_ln51_2_fu_829_p3 = ((icmp_ln51_6_reg_1190[0:0] == 1'b1) ? shl_ln52_2_fu_822_p3 : 15'd0);

assign select_ln51_3_fu_847_p3 = ((icmp_ln51_7_reg_1200[0:0] == 1'b1) ? shl_ln52_3_fu_840_p3 : 15'd0);

assign select_ln51_4_fu_865_p3 = ((icmp_ln51_8_reg_1210[0:0] == 1'b1) ? shl_ln52_4_fu_858_p3 : 15'd0);

assign select_ln51_5_fu_883_p3 = ((icmp_ln51_9_reg_1220[0:0] == 1'b1) ? shl_ln52_5_fu_876_p3 : 15'd0);

assign select_ln51_6_fu_901_p3 = ((icmp_ln51_10_reg_1230[0:0] == 1'b1) ? shl_ln52_6_fu_894_p3 : 15'd0);

assign select_ln51_7_fu_919_p3 = ((icmp_ln51_11_reg_1240[0:0] == 1'b1) ? shl_ln52_7_fu_912_p3 : 15'd0);

assign select_ln51_8_fu_937_p3 = ((icmp_ln51_12_reg_1250[0:0] == 1'b1) ? shl_ln52_8_fu_930_p3 : 15'd0);

assign select_ln51_9_fu_955_p3 = ((icmp_ln51_13_reg_1260[0:0] == 1'b1) ? shl_ln52_9_fu_948_p3 : 15'd0);

assign select_ln51_fu_793_p3 = ((icmp_ln51_4_reg_1170[0:0] == 1'b1) ? shl_ln_fu_786_p3 : 15'd0);

assign shl_ln52_10_fu_984_p3 = {{tmp_14_reg_1285}, {4'd0}};

assign shl_ln52_11_fu_1002_p3 = {{tmp_15_reg_1295}, {4'd0}};

assign shl_ln52_12_fu_1020_p3 = {{tmp_16_reg_1305}, {4'd0}};

assign shl_ln52_13_fu_1038_p3 = {{tmp_17_reg_1315}, {4'd0}};

assign shl_ln52_14_fu_1056_p3 = {{tmp_18_reg_1325}, {4'd0}};

assign shl_ln52_1_fu_804_p3 = {{tmp_5_reg_1185}, {4'd0}};

assign shl_ln52_2_fu_822_p3 = {{tmp_6_reg_1195}, {4'd0}};

assign shl_ln52_3_fu_840_p3 = {{tmp_7_reg_1205}, {4'd0}};

assign shl_ln52_4_fu_858_p3 = {{tmp_8_reg_1215}, {4'd0}};

assign shl_ln52_5_fu_876_p3 = {{tmp_9_reg_1225}, {4'd0}};

assign shl_ln52_6_fu_894_p3 = {{tmp_s_reg_1235}, {4'd0}};

assign shl_ln52_7_fu_912_p3 = {{tmp_10_reg_1245}, {4'd0}};

assign shl_ln52_8_fu_930_p3 = {{tmp_11_reg_1255}, {4'd0}};

assign shl_ln52_9_fu_948_p3 = {{tmp_12_reg_1265}, {4'd0}};

assign shl_ln52_s_fu_966_p3 = {{tmp_13_reg_1275}, {4'd0}};

assign shl_ln_fu_786_p3 = {{tmp_4_reg_1175}, {4'd0}};

assign start_out = real_start;

assign trunc_ln44_10_fu_310_p4 = {{layer2_out_dout[143:132]}};

assign trunc_ln44_11_fu_320_p4 = {{layer2_out_dout[155:144]}};

assign trunc_ln44_12_fu_330_p4 = {{layer2_out_dout[167:156]}};

assign trunc_ln44_13_fu_340_p4 = {{layer2_out_dout[179:168]}};

assign trunc_ln44_14_fu_350_p4 = {{layer2_out_dout[191:180]}};

assign trunc_ln44_15_fu_360_p4 = {{layer2_out_dout[203:192]}};

assign trunc_ln44_16_fu_370_p4 = {{layer2_out_dout[215:204]}};

assign trunc_ln44_17_fu_380_p4 = {{layer2_out_dout[227:216]}};

assign trunc_ln44_18_fu_390_p4 = {{layer2_out_dout[239:228]}};

assign trunc_ln44_1_fu_210_p4 = {{layer2_out_dout[23:12]}};

assign trunc_ln44_2_fu_220_p4 = {{layer2_out_dout[35:24]}};

assign trunc_ln44_3_fu_230_p4 = {{layer2_out_dout[47:36]}};

assign trunc_ln44_4_fu_240_p4 = {{layer2_out_dout[59:48]}};

assign trunc_ln44_5_fu_250_p4 = {{layer2_out_dout[71:60]}};

assign trunc_ln44_6_fu_260_p4 = {{layer2_out_dout[83:72]}};

assign trunc_ln44_7_fu_270_p4 = {{layer2_out_dout[95:84]}};

assign trunc_ln44_8_fu_280_p4 = {{layer2_out_dout[107:96]}};

assign trunc_ln44_9_fu_290_p4 = {{layer2_out_dout[119:108]}};

assign trunc_ln44_fu_206_p1 = layer2_out_dout[11:0];

assign trunc_ln44_s_fu_300_p4 = {{layer2_out_dout[131:120]}};

assign trunc_ln52_fu_406_p1 = layer2_out_dout[10:0];

assign zext_ln45_1_fu_746_p1 = out_data_3_fu_739_p3;

assign zext_ln45_2_fu_764_p1 = out_data_5_fu_757_p3;

assign zext_ln45_3_fu_782_p1 = out_data_7_fu_775_p3;

assign zext_ln45_fu_728_p1 = out_data_1_fu_721_p3;

assign zext_ln51_10_fu_980_p1 = select_ln51_10_fu_973_p3;

assign zext_ln51_11_fu_998_p1 = select_ln51_11_fu_991_p3;

assign zext_ln51_12_fu_1016_p1 = select_ln51_12_fu_1009_p3;

assign zext_ln51_13_fu_1034_p1 = select_ln51_13_fu_1027_p3;

assign zext_ln51_14_fu_1052_p1 = select_ln51_14_fu_1045_p3;

assign zext_ln51_1_fu_818_p1 = select_ln51_1_fu_811_p3;

assign zext_ln51_2_fu_836_p1 = select_ln51_2_fu_829_p3;

assign zext_ln51_3_fu_854_p1 = select_ln51_3_fu_847_p3;

assign zext_ln51_4_fu_872_p1 = select_ln51_4_fu_865_p3;

assign zext_ln51_5_fu_890_p1 = select_ln51_5_fu_883_p3;

assign zext_ln51_6_fu_908_p1 = select_ln51_6_fu_901_p3;

assign zext_ln51_7_fu_926_p1 = select_ln51_7_fu_919_p3;

assign zext_ln51_8_fu_944_p1 = select_ln51_8_fu_937_p3;

assign zext_ln51_9_fu_962_p1 = select_ln51_9_fu_955_p3;

assign zext_ln51_fu_800_p1 = select_ln51_fu_793_p3;

endmodule //hls_cnn_2d_100s_relu_array_ap_fixed_20u_array_ap_fixed_16_2_5_3_0_20u_relu_config3_s
